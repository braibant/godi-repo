--- gio/glocalfile.c.orig	2014-02-03 17:40:41.000000000 +0000
+++ gio/glocalfile.c	2014-03-02 14:30:32.519644000 +0000
@@ -2648,10 +2648,45 @@
 
 #if defined (AT_FDCWD)
   if (fstatat (parent_fd, name->data, &buf, AT_SYMLINK_NOFOLLOW) != 0)
-#else
+    return g_local_file_measure_size_error (state->flags, errno, name, error);
+#elif defined (HAVE_LSTAT) || !defined (G_OS_WIN32)
   if (g_lstat (name->data, &buf) != 0)
-#endif
     return g_local_file_measure_size_error (state->flags, errno, name, error);
+#else
+  {
+    const char *filename = (const gchar *) name->data;
+    wchar_t *wfilename = g_utf8_to_utf16 (filename, -1, NULL, NULL, NULL);
+    int retval;
+    int save_errno;
+    int len;
+
+    if (wfilename == NULL)
+      {
+        errno = EINVAL;
+        return g_local_file_measure_size_error (state->flags, errno, name, error);
+      }
+
+    len = wcslen (wfilename);
+    while (len > 0 && G_IS_DIR_SEPARATOR (wfilename[len-1]))
+      len--;
+    if (len > 0 &&
+        (!g_path_is_absolute (filename) || len > g_path_skip_root (filename) - filename))
+      wfilename[len] = '\0';
+
+#ifdef _WIN64
+    retval = _wstati64 (wfilename, &buf);
+#else
+    retval = _wstat32i64 (wfilename, &buf);
+#endif
+    save_errno = errno;
+
+    g_free (wfilename);
+
+    errno = save_errno;
+    if (retval != 0)
+      return g_local_file_measure_size_error (state->flags, errno, name, error);
+  }
+#endif
 
   if (name->next)
     {
