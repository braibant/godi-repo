diff -r -N -u ../oasis-0.4.2.orig/examples/with test space/LICENSE.txt ./examples/with test space/LICENSE.txt
--- ../oasis-0.4.2.orig/examples/with test space/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./examples/with test space/LICENSE.txt	2014-03-11 12:29:28.838298194 +0100
@@ -0,0 +1,21 @@
+********************************************************************************
+*  OASIS: architecture for building OCaml libraries and applications           *
+*                                                                              *
+*  Copyright (C) 2008-2010, OCamlCore SARL                                     *
+*                                                                              *
+*  This library is free software; you can redistribute it and/or modify it     *
+*  under the terms of the GNU Lesser General Public License as published by    *
+*  the Free Software Foundation; either version 2.1 of the License, or (at     *
+*  your option) any later version, with the OCaml static compilation           *
+*  exception.                                                                  *
+*                                                                              *
+*  This library is distributed in the hope that it will be useful, but         *
+*  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY  *
+*  or FITNESS FOR A PARTICULAR PURPOSE. See the file COPYING for more          *
+*  details.                                                                    *
+*                                                                              *
+*  You should have received a copy of the GNU Lesser General Public License    *
+*  along with this library; if not, write to the Free Software Foundation,     *
+*  Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA               *
+********************************************************************************
+
diff -r -N -u ../oasis-0.4.2.orig/examples/with test space/_oasis ./examples/with test space/_oasis
--- ../oasis-0.4.2.orig/examples/with test space/_oasis	1970-01-01 01:00:00.000000000 +0100
+++ ./examples/with test space/_oasis	2014-03-11 12:29:28.838298194 +0100
@@ -0,0 +1,20 @@
+OASISFormat: 0.1
+Name:        with-data
+Version:     0.1
+License:     GPL
+LicenseFile: LICENSE.txt
+Authors:     Sylvain Le Gall
+Synopsis:    Library and executable with test
+Plugins:     META (0.0.1)
+BuildTools:  ocamlbuild
+
+Executable test
+ Install: false
+ Path: src
+ MainIs: test.ml
+ BuildDepends: oUnit
+
+Test "main"
+ Type: Custom (0.0.1)
+ Command: $test
+ WorkingDirectory: src
diff -r -N -u ../oasis-0.4.2.orig/examples/with test space/src/test.ml ./examples/with test space/src/test.ml
--- ../oasis-0.4.2.orig/examples/with test space/src/test.ml	1970-01-01 01:00:00.000000000 +0100
+++ ./examples/with test space/src/test.ml	2014-03-11 12:29:28.838298194 +0100
@@ -0,0 +1,32 @@
+(******************************************************************************)
+(* OASIS: architecture for building OCaml libraries and applications          *)
+(*                                                                            *)
+(* Copyright (C) 2008-2010, OCamlCore SARL                                    *)
+(*                                                                            *)
+(* This library is free software; you can redistribute it and/or modify it    *)
+(* under the terms of the GNU Lesser General Public License as published by   *)
+(* the Free Software Foundation; either version 2.1 of the License, or (at    *)
+(* your option) any later version, with the OCaml static compilation          *)
+(* exception.                                                                 *)
+(*                                                                            *)
+(* This library is distributed in the hope that it will be useful, but        *)
+(* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY *)
+(* or FITNESS FOR A PARTICULAR PURPOSE. See the file COPYING for more         *)
+(* details.                                                                   *)
+(*                                                                            *)
+(* You should have received a copy of the GNU Lesser General Public License   *)
+(* along with this library; if not, write to the Free Software Foundation,    *)
+(* Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA              *)
+(******************************************************************************)
+
+open OUnit;;
+
+let myrun t =
+  let lst =
+    run_test_tt_main t
+  in
+    lst
+;;
+
+myrun ("main" >:: (fun () -> ()))
+;;
diff -r -N -u ../oasis-0.4.2.orig/examples/with test space/src/test.mli ./examples/with test space/src/test.mli
--- ../oasis-0.4.2.orig/examples/with test space/src/test.mli	1970-01-01 01:00:00.000000000 +0100
+++ ./examples/with test space/src/test.mli	2014-03-11 12:29:28.838298194 +0100
@@ -0,0 +1,22 @@
+(******************************************************************************)
+(* OASIS: architecture for building OCaml libraries and applications          *)
+(*                                                                            *)
+(* Copyright (C) 2008-2010, OCamlCore SARL                                    *)
+(*                                                                            *)
+(* This library is free software; you can redistribute it and/or modify it    *)
+(* under the terms of the GNU Lesser General Public License as published by   *)
+(* the Free Software Foundation; either version 2.1 of the License, or (at    *)
+(* your option) any later version, with the OCaml static compilation          *)
+(* exception.                                                                 *)
+(*                                                                            *)
+(* This library is distributed in the hope that it will be useful, but        *)
+(* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY *)
+(* or FITNESS FOR A PARTICULAR PURPOSE. See the file COPYING for more         *)
+(* details.                                                                   *)
+(*                                                                            *)
+(* You should have received a copy of the GNU Lesser General Public License   *)
+(* along with this library; if not, write to the Free Software Foundation,    *)
+(* Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA              *)
+(******************************************************************************)
+
+val myrun : OUnit.test -> OUnit.test_result list
diff -r -N -u ../oasis-0.4.2.orig/src/base/BaseCheck.ml ./src/base/BaseCheck.ml
--- ../oasis-0.4.2.orig/src/base/BaseCheck.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/base/BaseCheck.ml	2014-03-11 15:18:38.598405263 +0100
@@ -118,9 +118,10 @@
   in
   let findlib_dir pkg =
     let dir =
-      OASISExec.run_read_one_line ~ctxt:!BaseContext.default
-        (ocamlfind ())
-        ["query"; "-format"; "%d"; pkg]
+      OASISHostPath.of_unix (
+        OASISExec.run_read_one_line ~ctxt:!BaseContext.default
+          (ocamlfind ())
+          ["query"; "-format"; "%d"; pkg] )
     in
       if Sys.file_exists dir && Sys.is_directory dir then
         dir
diff -r -N -u ../oasis-0.4.2.orig/src/base/BaseCustom.ml ./src/base/BaseCustom.ml
--- ../oasis-0.4.2.orig/src/base/BaseCustom.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/base/BaseCustom.ml	2014-03-11 12:29:28.838298194 +0100
@@ -31,7 +31,7 @@
   OASISExec.run ~ctxt:!BaseContext.default ~quote:false
     (var_expand cmd)
     (List.map
-       var_expand
+       (var_expand ~quoted:true)
        (args @ (Array.to_list extra_args)))
 
 
diff -r -N -u ../oasis-0.4.2.orig/src/base/BaseEnv.ml ./src/base/BaseEnv.ml
--- ../oasis-0.4.2.orig/src/base/BaseEnv.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/base/BaseEnv.ml	2014-03-11 12:29:28.838298194 +0100
@@ -72,7 +72,7 @@
   Genlex.make_lexer []
 
 
-let rec var_expand str =
+let rec var_expand ?(quoted=false) str =
   let buff =
     Buffer.create ((String.length str) * 2)
   in
@@ -100,7 +100,11 @@
                | [Genlex.Ident "ocaml_escaped"; Genlex.String s] ->
                    String.escaped s
                | [Genlex.Ident nm] ->
-                   var_get nm
+                   let s = var_get nm in
+                   if quoted then
+                     OASISHostPath.quote s
+                   else
+                     s
                | _ ->
                    failwithf
                      (f_ "Unknown expression '%s' in variable expansion of %s.")
diff -r -N -u ../oasis-0.4.2.orig/src/base/BaseEnv.mli ./src/base/BaseEnv.mli
--- ../oasis-0.4.2.orig/src/base/BaseEnv.mli	2014-02-23 13:05:14.000000000 +0100
+++ ./src/base/BaseEnv.mli	2014-03-11 12:29:28.838298194 +0100
@@ -78,9 +78,9 @@
 
 (** Expand variable that can be found in string. Variable follow definition of
   * variable for [Buffer.add_substitute].
+  * quoted is false by default
   *)
-val var_expand: string -> string
-
+val var_expand: ?quoted:bool -> string -> string
 
 (** Get variable.
   *)
diff -r -N -u ../oasis-0.4.2.orig/src/base/BaseOCamlcConfig.ml ./src/base/BaseOCamlcConfig.ml
--- ../oasis-0.4.2.orig/src/base/BaseOCamlcConfig.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/base/BaseOCamlcConfig.ml	2014-03-11 12:29:28.838298194 +0100
@@ -116,6 +116,9 @@
     match nm with
       | "ocaml_version" ->
           "version", chop_version_suffix
+      | "standard_library"
+      | "standard_library_default" ->
+          nm, ( fun x -> OASISHostPath.of_unix x)
       | _ -> nm, (fun x -> x)
   in
     var_redefine
diff -r -N -u ../oasis-0.4.2.orig/src/base/BaseSetup.ml ./src/base/BaseSetup.ml
--- ../oasis-0.4.2.orig/src/base/BaseSetup.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/base/BaseSetup.ml	2014-03-11 12:40:35.473447144 +0100
@@ -88,34 +88,52 @@
 
 let configure t args =
   (* Run configure *)
-  BaseCustom.hook
-    t.package.conf_custom
-    (fun () ->
-       (* Reload if preconf has changed it *)
-       begin
-         try
-           unload ();
-           load ();
-         with _ ->
-           ()
-       end;
-
-       (* Run plugin's configure *)
-       t.configure t.package args;
-
-       (* Dump to allow postconf to change it *)
-       dump ())
-    ();
-
-  (* Reload environment *)
-  unload ();
-  load ();
 
-  (* Save environment *)
-  print ();
+  (* use-bash is an exception. It's already needed to run the
+     pre-configure script. *)
+  let rec f = function
+    | [] ->
+      begin
+        try
+          let x = Sys.getenv "USE_BASH" in
+            OASISHostPath.bash_cmd := (fun () -> x);
+        with
+          _ -> ()
+      end
+    | "--use-bash"::x::_ ->
+        OASISHostPath.bash_cmd := (fun () -> x);
+    | _::tl -> f tl
+  in
+    f (Array.to_list args);
+    BaseCustom.hook
+      t.package.conf_custom
+      (fun () ->
+         OASISHostPath.bash_cmd := BaseStandardVar.bash_cmd;
+         (* Reload if preconf has changed it *)
+         begin
+           try
+             unload ();
+             load ();
+           with _ ->
+             ()
+         end;
+
+         (* Run plugin's configure *)
+         t.configure t.package args;
+
+         (* Dump to allow postconf to change it *)
+         dump ())
+      ();
+
+    (* Reload environment *)
+    unload ();
+    load ();
 
-  (* Replace data in file *)
-  BaseFileAB.replace t.package.files_ab
+    (* Save environment *)
+    print ();
+
+    (* Replace data in file *)
+    BaseFileAB.replace t.package.files_ab
 
 
 let build t args =
diff -r -N -u ../oasis-0.4.2.orig/src/base/BaseStandardVar.ml ./src/base/BaseStandardVar.ml
--- ../oasis-0.4.2.orig/src/base/BaseStandardVar.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/base/BaseStandardVar.ml	2014-03-11 12:50:21.942297267 +0100
@@ -136,15 +136,27 @@
 
 
 let (/) a b =
-  if os_type () = Sys.os_type then
-    Filename.concat a b
-  else if os_type () = "Unix" then
-    OASISUnixPath.concat a b
-  else
-    OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat")
-      (os_type ())
+  let os = os_type () in
+    if os = Sys.os_type then
+      if Sys.os_type = "Win32" && OASISHostPath.use_bash () then
+        OASISUnixPath.concat a b
+      else
+        Filename.concat a b
+    else if os = "Unix" then
+      OASISUnixPath.concat a b
+    else
+      OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat")
+        (os_type ())
 (**/**)
 
+let bash_cmd =
+  var_define
+    ~short_desc:(fun () -> s_ "Enforced bash shell:")
+    ~cli:CLIAuto
+    ~arg_help:"program"
+    "use_bash"
+    (fun () -> "")
+
 
 let prefix =
   p "prefix"
@@ -152,10 +164,30 @@
     (fun () ->
        match os_type () with
          | "Win32" ->
+             let getenv w =
+               try
+                 Some(Sys.getenv w)
+               with
+                 | Not_found -> None
+             in
+             let s =
+               if Sys.word_size = 64 then
+                 getenv "ProgramW6432"
+               else
+                 None
+             in
+             let s =
+               if s = None then
+                 getenv "PROGRAMFILES"
+               else
+                 s
+             in
              let program_files =
-               Sys.getenv "PROGRAMFILES"
+               match s with
+                 | None -> "C:\\Program Files"
+                 | Some x -> x
              in
-               program_files/(pkg_name ())
+               OASISHostPath.of_unix (program_files/(pkg_name ()))
          | _ ->
              "/usr/local")
 
@@ -241,7 +273,15 @@
 let docdir =
   p "docdir"
     (fun () -> s_ "Documentation root")
-    (fun () -> "$datarootdir"/"doc"/"$pkg_name")
+    (fun () ->
+      (* TODO: (Windows only?) "$pkg_name" is not always substituted
+       * (at least if datarootdir contains spaces or other garbage)
+       * I haven't looked up why.
+       *)
+      match os_type () with
+        | "Win32" -> "$datarootdir"/"doc"/ ( pkg_name () )
+        | _ -> "$datarootdir"/"doc"/"$pkg_name"
+    )
 
 
 let htmldir =
@@ -315,9 +355,10 @@
     ~short_desc:(fun () -> s_ "Remove a file.")
     "rm"
     (fun () ->
-       match os_type () with
-         | "Win32" -> "del"
-         | _ -> "rm -f")
+       if not (OASISHostPath.use_bash ()) && os_type () = "Win32" then
+         "del"
+       else
+         "rm -f" )
 
 
 let rmdir =
@@ -325,9 +366,10 @@
     ~short_desc:(fun () -> s_ "Remove a directory.")
     "rmdir"
     (fun () ->
-       match os_type () with
-         | "Win32" -> "rd"
-         | _ -> "rm -rf")
+       if not (OASISHostPath.use_bash ()) && os_type () = "Win32" then
+         "rd"
+       else
+         "rm -rf")
 
 
 let debug =
@@ -425,3 +467,5 @@
   rpkg := Some pkg;
   List.iter (fun f -> f pkg.oasis_version) !var_cond
 
+let () =
+  OASISHostPath.bash_cmd := bash_cmd
diff -r -N -u ../oasis-0.4.2.orig/src/base/BaseStandardVar.mli ./src/base/BaseStandardVar.mli
--- ../oasis-0.4.2.orig/src/base/BaseStandardVar.mli	2014-02-23 13:05:14.000000000 +0100
+++ ./src/base/BaseStandardVar.mli	2014-03-11 12:29:34.686465828 +0100
@@ -73,6 +73,9 @@
 val systhread_supported:      unit -> string
 
 
+
+val bash_cmd:                 unit -> string
+
 (** {2 Paths}
 
     See {{:http://www.gnu.org/prep/standards/html_node/Directory-Variables.html} GNU standards}.
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISCustom.ml ./src/oasis/OASISCustom.ml
--- ../oasis-0.4.2.orig/src/oasis/OASISCustom.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISCustom.ml	2014-03-11 14:43:33.422124617 +0100
@@ -38,14 +38,14 @@
   let pre_command =
     new_field_conditional schm ("Pre"^nm^"Command")
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       hlp_pre
       (fun pkg -> (sync pkg).pre_command)
   in
   let post_command =
     new_field_conditional schm ("Post"^nm^"Command")
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       hlp_post
       (fun pkg -> (sync pkg).post_command)
   in
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISExec.ml ./src/oasis/OASISExec.ml
--- ../oasis-0.4.2.orig/src/oasis/OASISExec.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISExec.ml	2014-03-11 13:02:23.955218580 +0100
@@ -26,25 +26,215 @@
 open OASISMessage
 
 
+
+
+(* In general, there is no chance to quote properly with the current
+ * settings. ( Note, that this is only a problem, if BaseCustom.run is
+ * used (e.g test commands, PreConfigure,....). Most of the time,
+ * OASISExec.run is used with enabled quoting.
+ *
+ * "$rm" should ideally expand to 'rm -f' (no quotes), but "$text_exec"
+ * should ideally expand to '"C:\Program Files\dir\test.exe"' (with
+ * quotes). Paths with spaces are common on Windows, so this problem
+ * can't be ignored.
+ *
+ * Using a command with additional parameters is quite useful, not only
+ * for trivial cases like $rm. You could add an additional parameter
+ * for $make in order to use a special compatibility mode, on windows
+ * you can use it to inform ocaml that a certain program is a shell
+ * script ('sh.exe pcre-config'), ...
+ *
+ * An additional parameter (e.g. $rm_switches) would be ugly,
+ * especially for *nix users, who don't use space characters in their
+ * installation paths anyway.
+ *
+ * Therefore, I use the following workaround which should work most of
+ * the time:
+ * - if cmd doesn't contains spaces or other suspicious characters, it
+ *   can be quoted in the usual way (not ambigous, I think)
+ * - if cmd does contain spaces, a file with this name exists, and the
+ *   beginning of cmd looks like a absolute pathname
+ *   ('\\test\dir\foo.exe' or "C:\\sa df\\foo.exe" - not "foo.exe" ), I
+ *   will also quote it. (ambigous, there could be "C:\bin\rm.exe" and
+ *   "C:\bin\rm -f.exe").  Relative filenames are not considered,
+ *   because I assume the source code folder contains only well named
+ *   files and relative paths like "../../make.exe" are uncommon
+ *   (autoconf even rejects them)
+ *)
+
+
+(* stricter settings as for regular windows batch lines
+ * necessary because of shell comannds like:
+ *   LC_ALL=C make ....
+*)
+let is_dubious_char = function
+  | '~' | ':' | '.' | '-' | '_' | '/' | '\\' -> false
+  | c ->
+    OASISString.is_digit c = false &&
+    OASISString.is_alpha c = false
+
+
+let win_quote_needed ~sep str =
+  String.length str = 0 ||
+  OASISString.exists ( fun c -> c = sep || c = '"' || OASISString.is_whitespace c ) str
+
+let is_simple_command str =
+  String.length str > 0 &&
+  not (OASISString.exists is_dubious_char str)
+
+let is_path_sep = function
+  | '/' | '\\' -> true
+  | _ -> false
+
+let starts_with_absolute_path cmd =
+  let len = String.length cmd in
+    if len < 3 then
+      false
+    else
+      let c0 = cmd.[0] in
+      let c1 = cmd.[1] in
+        if is_path_sep c0 && is_path_sep c1 then (* network devices: "//" *)
+          true
+        else if len = 3 then
+          false
+        else  (* C:\.... *)
+          OASISString.is_alpha c0 && c1 = ':' && is_path_sep cmd.[2]
+
+let exe_exts = lazy
+  begin
+    let exts =
+      try
+        OASISString.nsplit
+          (Sys.getenv "PATHEXT")
+          ';'
+      with
+        | Not_found -> []
+    in
+    let exts' =
+      List.filter
+        ( fun a -> a <> "" && a.[0] = '.' && a <> ".EXE" )
+        (List.map String.uppercase exts) (* windows file system doesn't care *)
+    in
+      ".EXE"::exts' (* .exe first, most common *)
+  end
+
+let exe_file_exists fln =
+  Sys.file_exists fln ||
+  List.exists
+    (fun a -> Sys.file_exists ( fln ^ a ) )
+    (Lazy.force exe_exts)
+
+
+let quote_anyway cmd =
+  if Sys.os_type <> "Win32" then (* workaround for windows only *)
+    false
+  else if is_simple_command cmd then
+    true
+  else
+    OASISString.exists OASISString.is_whitespace cmd &&
+      starts_with_absolute_path cmd &&
+      exe_file_exists cmd
+
+
+let run_bash ~ctxt ?f_exit_code ?(quote=true) cmd args =
+  let fn = Filename.temp_file "oasis-" ".sh" in
+  let fn_deleted = ref false in
+    try
+      begin
+        let ch = open_out_bin fn in
+        let ch_closed = ref false in
+          try
+            begin
+              let cmd =
+                if quote || quote_anyway cmd then
+                  OASISHostPath.quote (OASISHostPath.of_unix cmd)
+                else
+                  cmd
+              in
+                output_string ch cmd;
+                List.iter
+                  ( fun s -> output_char ch ' '; output_string ch s )
+                  args ;
+                output_char ch '\n';
+                ch_closed:=true ;
+                close_out ch;
+                let bash = !OASISHostPath.bash_cmd () in
+                let add_quotes = ref false in
+                let shell_cmd =
+                  if Sys.os_type <> "Win32" then
+                    Filename.quote bash
+                  else
+                    if win_quote_needed ~sep:'\\' bash = false then
+                      bash
+                    else
+                      begin
+                        add_quotes := true;
+                        Filename.quote bash
+                      end
+                in
+                let cmdline_orig = String.concat " " (cmd :: args) in
+                let cmdline =
+                  let s = shell_cmd ^ " " ^ (Filename.quote fn) in
+                    if !add_quotes then
+                      "\"" ^ s ^ "\""
+                    else
+                      s
+                in
+                  info ~ctxt (f_ "Running command '%s'") cmdline_orig;
+                  let ret = Sys.command cmdline in
+                    fn_deleted := true;
+                    Sys.remove fn;
+                    match f_exit_code, ret with
+                      | None, 0 -> ()
+                      | None, i ->
+                          failwithf
+                            (f_ "Command '%s' terminated with error code %d")
+                            cmdline_orig i
+                      | Some f, i ->
+                          f i
+            end
+          with
+            | x when !ch_closed = false ->
+                close_out_noerr ch;
+                raise x
+      end
+    with
+      | x when !fn_deleted = false ->
+          (try Sys.remove fn with _ -> () ) ;
+          raise x
+
 (* TODO: I don't like this quote, it is there because $(rm) foo expands to
  * 'rm -f' foo...
  *)
-let run ~ctxt ?f_exit_code ?(quote=true) cmd args =
+
+let run_default ~ctxt ?f_exit_code ?(quote=true) cmd args =
+  let add_quotes = ref false in
   let cmd =
-    if quote then
+    if quote || quote_anyway cmd then
       if Sys.os_type = "Win32" then
-        if String.contains cmd ' ' then
-          (* Double the 1st double quote... win32... sigh *)
-          "\""^(Filename.quote cmd)
-        else
-          cmd
+        begin
+          if win_quote_needed ~sep:'/' cmd = false then
+            cmd
+          else
+            begin
+              (* Double the 1st double quote... win32... sigh *)
+              (* Above comment ist false. The whole string must be quoted.
+               * However, an error is only triggered, if args contains also
+               * quoted parameters *)
+              add_quotes := true;
+              Filename.quote cmd
+            end
+        end
       else
         Filename.quote cmd
     else
       cmd
   in
   let cmdline =
-    String.concat " " (cmd :: args)
+    let s = String.concat " " (cmd :: args) in
+      match !add_quotes with
+        | true -> "\"" ^ s ^ "\""
+        | false -> s
   in
     info ~ctxt (f_ "Running command '%s'") cmdline;
     match f_exit_code, Sys.command cmdline with
@@ -57,6 +247,13 @@
           f i
 
 
+
+let run ~ctxt ?f_exit_code ?quote cmd args =
+  if OASISHostPath.use_bash () then
+    run_bash ~ctxt ?f_exit_code ?quote cmd args
+  else
+    run_default ~ctxt ?f_exit_code ?quote cmd args
+
 let run_read_output ~ctxt ?f_exit_code cmd args =
   let fn =
     Filename.temp_file "oasis-" ".txt"
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISFileUtil.ml ./src/oasis/OASISFileUtil.ml
--- ../oasis-0.4.2.orig/src/oasis/OASISFileUtil.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISFileUtil.ml	2014-03-11 14:18:03.426068313 +0100
@@ -100,7 +100,10 @@
       | _ ->
           [""]
   in
+  let p =
     find_file ~case_sensitive:false [path_lst; [prg]] exec_ext
+  in
+    OASISHostPath.of_unix p
 
 
 (**/**)
@@ -117,32 +120,31 @@
       dn
 
 
-let q = Filename.quote
+let q s = OASISHostPath.quote (OASISHostPath.of_unix s)
 (**/**)
 
 
 let cp ~ctxt ?(recurse=false) src tgt =
   if recurse then
-    match Sys.os_type with
-      | "Win32" ->
-          OASISExec.run ~ctxt
-            "xcopy" [q src; q tgt; "/E"]
-      | _ ->
-          OASISExec.run ~ctxt
-            "cp" ["-r"; q src; q tgt]
+    if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
+      OASISExec.run ~ctxt "xcopy" [q src; q tgt; "/E"]
+    else
+      OASISExec.run ~ctxt "cp" ["-r"; q src; q tgt]
   else
     OASISExec.run ~ctxt
-      (match Sys.os_type with
-       | "Win32" -> "copy"
-       | _ -> "cp")
+      ( if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
+          "copy"
+        else
+          "cp" )
       [q src; q tgt]
 
 
 let mkdir ~ctxt tgt =
   OASISExec.run ~ctxt
-    (match Sys.os_type with
-       | "Win32" -> "md"
-       | _ -> "mkdir")
+    ( if Sys.os_type = "Win32" && not (OASISHostPath.use_bash ()) then
+        "md"
+      else
+        "mkdir" )
     [q tgt]
 
 
@@ -172,10 +174,9 @@
 let rmdir ~ctxt tgt =
   if Sys.readdir tgt = [||] then
     begin
-      match Sys.os_type with
-        | "Win32" ->
+      if Sys.os_type = "Win32" && not (OASISHostPath.use_bash ()) then
             OASISExec.run ~ctxt "rd" [q tgt]
-        | _ ->
+      else
             OASISExec.run ~ctxt "rm" ["-r"; q tgt]
     end
 
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISHostPath.ml ./src/oasis/OASISHostPath.ml
--- ../oasis-0.4.2.orig/src/oasis/OASISHostPath.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISHostPath.ml	2014-03-11 12:29:28.890299685 +0100
@@ -26,6 +26,118 @@
 
 module Unix = OASISUnixPath
 
+let bash_cmd = ref ( fun () -> "" )
+
+let use_bash () = ( !bash_cmd () ) <> ""
+
+
+(* generic quote and unixquote are taken from ocaml source *)
+let generic_quote quotequote s =
+  let l = String.length s in
+  let b = Buffer.create (l + 20) in
+    Buffer.add_char b '\'';
+    for i = 0 to l - 1 do
+      if s.[i] = '\'' then
+        Buffer.add_string b quotequote
+      else
+        Buffer.add_char b  s.[i]
+    done;
+    Buffer.add_char b '\'';
+    Buffer.contents b
+
+let unixquote = generic_quote "'\\''"
+
+let win = Sys.os_type = "Win32"
+
+let quote str =
+  if win && use_bash () then
+    unixquote str
+  else
+    quote str
+
+(* uniform_path (only called, if Sys.os_type = "Win32")
+ * - enforces uniform path seperators
+ * - strips trailing slashes (exceptions in case of C:\ and / )
+ * - removes (some) unnecessary file components like ./././
+ *)
+
+let get_naccu accu str first pos =
+  (* I assume c//d is identic to c/d
+   * the only exception (Network devices \\xyz\asdf)
+   * is covered in uniform_path
+   *)
+  if first = pos then
+    accu
+  else
+    let nlen = pos - first in
+    let nstr = String.sub str first nlen in
+      (* test/././ is the same as test *)
+      if nlen = 1 && nstr = "." then
+        accu
+      (* a/b/../ is the same as a *)
+      else if nlen = 2 && nstr = ".." then
+        match accu with
+          | []      -> [ nstr ]
+          | ".."::_ -> nstr::accu
+          | hd::tl  -> tl
+      else
+        nstr::accu
+
+let is_path_sep = function
+  | '\\' | '/' -> true
+  | _ -> false
+
+
+let uniform_path path_sep = function
+  | "" -> "" (* Raise an exception? Or an possible intermediate result?
+             * Filename.basename and dirname also don't raise exceptions *)
+  | str ->
+      let rec iter accu str len first pos =
+        if pos >= len then
+          List.rev (get_naccu accu str first pos)
+        else
+          let next = succ pos in
+            match is_path_sep str.[pos] with
+              | true -> iter (get_naccu accu str first pos) str len next next
+              | false -> iter accu str len first next
+      in
+        let is_unix_root = is_path_sep str.[0] in
+        let len = String.length str in
+        let next_sep = len > 1 && is_path_sep str.[1] in
+        let is_network_root = is_unix_root && next_sep in
+        let is_currel = str.[0] = '.' && ( next_sep || len = 1 ) in
+        let l = iter [] str len 0 0 in
+        (* Trailing slashes are normally stripped.
+         * This is not possible in case of root folders
+         * Sys.file_exists "C:" is false, Sys.file_exists "C:\\" true
+         *)
+        let l_min =
+          match l with
+            | [] -> [ "" ]
+            | _ -> l
+        in
+        let l =
+          if is_network_root then
+            ""::""::l_min
+          else if is_unix_root then
+            ""::l_min
+          else if is_currel then
+            "."::l
+          else
+            match l with
+              | s :: [] ->
+                  (* root folders like C:\ *)
+                  if String.length s = 2 && s.[1] = ':' &&
+                    len > 2 && is_path_sep str.[2]
+                  then
+                    s :: [ "" ]
+                  else
+                    l
+              | _ -> l
+        in
+          String.concat path_sep l
+
+
 
 let make =
   function
@@ -35,20 +147,17 @@
         List.fold_left Filename.concat hd tl
 
 
-let of_unix ufn =
-  if Sys.os_type = "Unix" then
-    ufn
+let of_unix str =
+  if win = false then
+    str
   else
-    make
-      (List.map
-         (fun p ->
-            if p = Unix.current_dir_name then
-              current_dir_name
-            else if p = Unix.parent_dir_name then
-              parent_dir_name
+    let path_sep =
+      if use_bash () then
+        "/"
             else
-              p)
-         (OASISString.nsplit ufn '/'))
+        "\\"
+    in
+      uniform_path path_sep str
 
 
 (* END EXPORT *)
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISHostPath.mli ./src/oasis/OASISHostPath.mli
--- ../oasis-0.4.2.orig/src/oasis/OASISHostPath.mli	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISHostPath.mli	2014-03-11 12:29:28.890299685 +0100
@@ -29,6 +29,27 @@
 open OASISTypes
 
 
+(**
+    The function should return an unix like shell,
+    that will be used to execute external commands.
+
+    The default function returns an empty string.
+    (system default will be used)
+*)
+val bash_cmd : (unit -> host_filename) ref
+
+(** True, if bash_cmd_program will return a non-empty
+    host_filename *)
+val use_bash: unit -> bool
+
+
+(**
+   On windows, the Unix quote function
+   will be used, if use_base () is true.
+   Otherwise identic to Filename.quote
+*)
+val quote: string -> string
+
 (** Create a filename out of its components.
   *)
 val make: host_filename list -> host_filename
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISString.ml ./src/oasis/OASISString.ml
--- ../oasis-0.4.2.orig/src/oasis/OASISString.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISString.ml	2014-03-11 12:29:28.890299685 +0100
@@ -149,15 +149,30 @@
     done;
     buf
 
+(** Like List.exists, but for strings *)
+let exists f str =
+  let rec iter i =
+    if i < 0 then
+      false
+    else if f str.[i] then
+      true
+    else
+      iter (pred i)
+  in
+    iter (String.length str - 1)
 
-(* END EXPORT *)
+let is_digit c =
+  '0' <= c && c <= '9'
 
+let is_alpha c =
+  ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
 
 let is_whitespace =
   function
     | ' ' | '\r' | '\n' | '\t' -> true
     |  _  -> false
 
+(* END EXPORT *)
 
 let tokenize ?(is_whitespace=is_whitespace) ?(tokens=[]) str =
   let lst = ref [] in
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISValues.ml ./src/oasis/OASISValues.ml
--- ../oasis-0.4.2.orig/src/oasis/OASISValues.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISValues.ml	2014-03-11 14:53:35.479787579 +0100
@@ -474,6 +474,38 @@
            space_separated.print (cmd :: args))
     }
 
+let command_line_warn =
+  let c = command_line in
+  let is_unix_centric_operator = function
+    | "&&" | ";" | "||" -> true
+    | _ -> false
+  in
+
+  let parse = ( fun ~ctxt s ->
+                let (cmd,args) as cmd_args = c.parse ~ctxt s in
+                  if String.length cmd > 0 && cmd.[0] <> '$' then
+                    begin
+                      OASISMessage.warning
+                        ~ctxt
+                        "External commands may differ from platform to platform (%s)"
+                        cmd
+                    end;
+                  if List.exists is_unix_centric_operator args then
+                    begin
+                      OASISMessage.warning
+                        ~ctxt
+                        "Command line '%s' seems to be *nix specific"
+                        (String.concat "" (cmd::args))
+                    end;
+                  cmd_args )
+  in
+    {
+      parse ;
+      update = c.update;
+      print = c.print;
+    }
+
+
 
 let command_line_options =
   { parse = (fun ~ctxt s -> POSIXShell.split s);
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISValues.mli ./src/oasis/OASISValues.mli
--- ../oasis-0.4.2.orig/src/oasis/OASISValues.mli	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISValues.mli	2014-03-11 12:29:28.890299685 +0100
@@ -183,6 +183,9 @@
 val command_line: (string * string list) t
 
 
+(** As above, but emmit warnings by dubious constructs *)
+val command_line_warn : (string * string list) t
+
 (** Arguments of command line programs.  See {!OASISUtils.POSIX.split}
     for more information. *)
 val command_line_options: string list t
diff -r -N -u ../oasis-0.4.2.orig/src/oasis/OASISVersion.ml ./src/oasis/OASISVersion.ml
--- ../oasis-0.4.2.orig/src/oasis/OASISVersion.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/oasis/OASISVersion.ml	2014-03-11 12:29:28.890299685 +0100
@@ -45,12 +45,10 @@
 
 
 (* Range of allowed characters *)
-let is_digit c =
-  '0' <= c && c <= '9'
+let is_digit = OASISString.is_digit
 
 
-let is_alpha c =
-  ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
+let is_alpha = OASISString.is_alpha
 
 
 let is_special =
diff -r -N -u ../oasis-0.4.2.orig/src/plugins/custom/CustomPlugin.ml ./src/plugins/custom/CustomPlugin.ml
--- ../oasis-0.4.2.orig/src/plugins/custom/CustomPlugin.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/plugins/custom/CustomPlugin.ml	2014-03-11 14:32:38.557870148 +0100
@@ -217,7 +217,7 @@
       schema
       id
       nm
-      command_line
+      command_line_warn
       (* TODO: remove when fun () -> s_ be replaced *)
       (fun () -> s_ hlp)
       data (fun _ t -> t.cmd_main)
@@ -228,7 +228,7 @@
       id
       (nm^"Clean")
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       (* TODO: remove when fun () -> s_ be replaced *)
       (fun () -> s_ hlp_clean)
       data (fun _ t -> t.cmd_clean)
@@ -239,7 +239,7 @@
       id
       (nm^"Distclean")
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       (* TODO: remove when fun () -> s_ be replaced *)
       (fun () -> s_ hlp_distclean)
       data (fun _ t -> t.cmd_distclean)
@@ -441,7 +441,7 @@
       id
       "Clean"
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       (fun () ->
          s_ "Run command to clean test step.")
       test_data (fun _ t -> t.cmd_clean)
@@ -452,7 +452,7 @@
       id
       "Distclean"
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       (fun () ->
          s_ "Run command to distclean test step.")
       test_data (fun _ t -> t.cmd_distclean)
diff -r -N -u ../oasis-0.4.2.orig/src/plugins/internal/InternalInstallPlugin.ml ./src/plugins/internal/InternalInstallPlugin.ml
--- ../oasis-0.4.2.orig/src/plugins/internal/InternalInstallPlugin.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/plugins/internal/InternalInstallPlugin.ml	2014-03-11 12:29:28.894299799 +0100
@@ -63,11 +63,19 @@
   "install-findlib"
 
 
-let win32_max_command_line_length = 8000
-
-
 let split_install_command ocamlfind findlib_name meta files =
   if Sys.os_type = "Win32" then
+    let f s =
+      OASISHostPath.quote ( OASISHostPath.of_unix s )
+    in
+    let files = List.map f files in
+    let meta = f meta  in
+    let win32_max_command_line_length =
+      if OASISHostPath.use_bash () = false then
+        8000
+      else
+        30000
+    in
     (* Arguments for the first command: *)
     let first_args = ["install"; findlib_name; meta] in
     (* Arguments for remaining commands: *)
diff -r -N -u ../oasis-0.4.2.orig/src/plugins/ocamlbuild/OCamlbuildCommon.ml ./src/plugins/ocamlbuild/OCamlbuildCommon.ml
--- ../oasis-0.4.2.orig/src/plugins/ocamlbuild/OCamlbuildCommon.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./src/plugins/ocamlbuild/OCamlbuildCommon.ml	2014-03-11 12:29:28.894299799 +0100
@@ -56,7 +56,7 @@
           "-no-log";
           "-no-links";
           "-install-lib-dir";
-          (Filename.concat (standard_library ()) "ocamlbuild")
+          (OASISHostPath.quote (OASISHostPath.of_unix (Filename.concat (standard_library ()) "ocamlbuild")))
         ]
       else
         [];
diff -r -N -u ../oasis-0.4.2.orig/test/TestFull.ml ./test/TestFull.ml
--- ../oasis-0.4.2.orig/test/TestFull.ml	2014-02-23 13:05:14.000000000 +0100
+++ ./test/TestFull.ml	2014-03-11 12:29:28.894299799 +0100
@@ -314,6 +314,24 @@
          (* Run standard test. *)
          standard_test test_ctxt t);
 
+    "examples//with test space" >::
+    (fun test_ctxt ->
+       let () = skip_long_test test_ctxt in
+       let () =
+         skip_long_test test_ctxt;
+         skip_if
+           (Sys.os_type <> "Win32")
+           "Folders with spaces are only supported on windows"
+       in
+       let t =
+         setup_test_directories test_ctxt in_example_dir ["examples//with test space"]
+       in
+         oasis_setup test_ctxt t;
+         (* Setup expectation. *)
+         register_generated_files t oasis_ocamlbuild_files;
+         (* Run standard test. *)
+         standard_test test_ctxt t);
+
     (* Use sub-packages *)
     "examples/with-subpackage" >::
     (fun test_ctxt ->
