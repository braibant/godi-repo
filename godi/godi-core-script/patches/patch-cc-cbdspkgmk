--- ../godi-tools-3.0.18.orig/mk/build/mk/bsd.pkg.mk	2012-10-22 03:00:48.000000000 +0200
+++ ./mk/build/mk/bsd.pkg.mk	2012-11-01 13:01:33.000000000 +0100
@@ -52,6 +52,8 @@
 #.  endif
 
 MAKE_PROGRAM=		${GMAKE}
+.elif defined(USE_GMAKE2)
+MAKE_PROGRAM=		${LOCALBASE}/sbin/make2.exe
 .else
 .if defined(USE_OMAKE)
 MAKE_PROGRAM=		${LOCALBASE}/bin/omake
@@ -112,6 +114,83 @@
 ESSENTIAL_ENV:=		${ESSENTIAL_ENV} ${_var}=${_value:Q}
 .endfor
 
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+
+.if defined(C_INCLUDE_PATH)
+C_INCLUDE_PATH:=${LOCALBASE}/include:${C_INCLUDE_PATH}
+.else
+C_INCLUDE_PATH=${LOCALBASE}/include
+.endif
+MINGW_AUTOTOOLS_ENV+=	C_INCLUDE_PATH=${C_INCLUDE_PATH}
+
+.if defined(LIBRARY_PATH)
+LIBRARY_PATH:=${LOCALBASE}/lib:${LIBRARY_PATH}
+.else
+LIBRARY_PATH=${LOCALBASE}/lib
+.endif
+MINGW_AUTOTOOLS_ENV+=	LIBRARY_PATH=${LIBRARY_PATH}
+
+# try to enforce that the right, and currently only supported compiler is used
+
+# AS, AR,... are honoured by  recent versions of autools based scripts, but also
+# many other
+# MINGW_TOOL_PREFIX should be add to godi.conf by the bootstrap script
+.if defined(MINGW_TOOL_PREFIX) && ${MINGW_TOOL_PREFIX} != ""
+CFLAGS+=	-I${LOCALBASE}/include
+MINGW_AUTOTOOLS_ENV+=		AR=${MINGW_TOOL_PREFIX}ar
+MINGW_AUTOTOOLS_ENV+=		AS=${MINGW_TOOL_PREFIX}as
+# better set in /opt/godi/etc/godi.conf
+# MINGW_AUTOTOOLS_ENV+=		CC=${MINGW_TOOL_PREFIX}gcc
+MINGW_AUTOTOOLS_ENV+=		CPPFILT=${MINGW_TOOL_PREFIX}c++filt
+MINGW_AUTOTOOLS_ENV+=		CXX=${MINGW_TOOL_PREFIX}g++
+MINGW_AUTOTOOLS_ENV+=		DLLTOOL=${MINGW_TOOL_PREFIX}dlltool
+MINGW_AUTOTOOLS_ENV+=		DLLWRAP=${MINGW_TOOL_PREFIX}dllwrap
+MINGW_AUTOTOOLS_ENV+=		GCOV=${MINGW_TOOL_PREFIX}gcov
+MINGW_AUTOTOOLS_ENV+=		LD=${MINGW_TOOL_PREFIX}ld
+MINGW_AUTOTOOLS_ENV+=		NM=${MINGW_TOOL_PREFIX}nm
+MINGW_AUTOTOOLS_ENV+=		OBJCOPY=${MINGW_TOOL_PREFIX}objcopy
+MINGW_AUTOTOOLS_ENV+=		OBJDUMP=${MINGW_TOOL_PREFIX}objdump
+MINGW_AUTOTOOLS_ENV+=		RANLIB=${MINGW_TOOL_PREFIX}ranlib
+MINGW_AUTOTOOLS_ENV+=		RC=${MINGW_TOOL_PREFIX}windres
+MINGW_AUTOTOOLS_ENV+=		READELF=${MINGW_TOOL_PREFIX}readelf
+MINGW_AUTOTOOLS_ENV+=		SIZE=${MINGW_TOOL_PREFIX}size
+MINGW_AUTOTOOLS_ENV+=		STRINGS=${MINGW_TOOL_PREFIX}strip
+MINGW_AUTOTOOLS_ENV+=		STRIP=${MINGW_TOOL_PREFIX}strip
+MINGW_AUTOTOOLS_ENV+=		WINDMC=${MINGW_TOOL_PREFIX}windmc
+MINGW_AUTOTOOLS_ENV+=		WINDRES=${MINGW_TOOL_PREFIX}windres
+CPP=${MINGW_TOOL_PREFIX}cpp
+
+MAKE_ENV+=	${MINGW_AUTOTOOLS_ENV}
+CONFIGURE_ENV+=	${MINGW_AUTOTOOLS_ENV}
+
+.endif
+
+.if defined(MINGW_BIN_PATH) && ${MINGW_BIN_PATH} != ""
+# eg. /usr/x86_64-w64-mingw32/bin contains unprefixd versions of ld , strip, ...
+# however there is no unprefixed version for e.g. gcc
+# MINGW_BIN_PATH should be add to godi.conf by the bootsrap script
+PATH:=		${MINGW_BIN_PATH}:${PATH}
+.endif
+
+.if defined(MINGW_AUTOTOOLS_BUILD) && defined(MINGW_HOST) && ${MINGW_HOST} != ""
+# the x86_64-w64-mingw32/it686-w64-mingw32 packages from cygwin are cross
+# compilers. They are 32-bit cygwin programs, but can(!) compile to
+# code that is independend of cygwin. We need to tell configure scripts
+# that we want to do this.
+# MINGW_HOST should be add to godi.conf by the bootstrap script.
+# User can change it, if they want to generate faster code that is
+# restricted to their cpu
+CONFIGURE_ARGS+=	--host=${MINGW_HOST} --build=i686-pc-cygwin
+.endif
+.if defined(USE_OMAKE)
+MAKE_FLAGS+= 	LDFLAGS=${LDFLAGS:Q}
+MAKE_FLAGS+= 	CFLAGS=${CFLAGS:Q}
+.endif
+
+
+.endif
+
+
 # How to invoke "make" in wrkdir to build and install the software:
 MAKE_ENV+=		OPSYS=${OPSYS:Q}
 .if defined(W32PORT)
@@ -128,7 +207,15 @@
 MAKE_ENV+=		WHOLE_ARCHIVE_FLAG=${WHOLE_ARCHIVE_FLAG:Q}
 MAKE_ENV+=		NO_WHOLE_ARCHIVE_FLAG=${NO_WHOLE_ARCHIVE_FLAG:Q}
 MAKE_ENV+=		LINK_ALL_LIBGCC_HACK=${LINK_ALL_LIBGCC_HACK:Q}
+
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+# We always need a backup copy of flexdll because of circular dependencies
+# The files at ${LOCALBASE:Q}/lib/flexdll-backup are added during the deinstallation
+# of godi-flexdll
+MAKE_ENV+=		PATH=${LOCALBASE:Q}/bin:${LOCALBASE:Q}/lib/flexdll-backup/bin:${PATH:Q}
+.else
 MAKE_ENV+=		PATH=${LOCALBASE:Q}/bin:${PATH:Q}
+.endif
 MAKE_ENV+=		PREFIX=${PREFIX:Q}
 MAKE_ENV+= 		LOCALBASE=${LOCALBASE:Q}
 MAKE_ENV+= 		LOCALBASE_NATIVE=${LOCALBASE_NATIVE:Q}
@@ -166,7 +253,12 @@
 CONFIGURE_ENV+=		ELF_RPATH_FLAG=${ELF_RPATH_FLAG:Q}
 CONFIGURE_ENV+=		RPATH_FLAG=${RPATH_FLAG:Q}
 .endif
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+# see corresponding comment at MAKE_ENV
+CONFIGURE_ENV+=		PATH=${LOCALBASE:Q}/bin:${LOCALBASE:Q}/lib/flexdll-backup/bin:${PATH:Q}
+.else
 CONFIGURE_ENV+=		PATH=${LOCALBASE:Q}/bin:${PATH:Q}
+.endif
 CONFIGURE_ENV+=		PREFIX=${PREFIX:Q}
 CONFIGURE_ENV+= 	LOCALBASE=${LOCALBASE:Q}
 CONFIGURE_ENV+= 	LOCALBASE_NATIVE=${LOCALBASE_NATIVE:Q}
@@ -215,7 +307,14 @@
 GODI_SCRIPT ?= ${LOCALBASE}/bin/godi_script
 
 .if defined(CONF_SCRIPT) && ${CONF_SCRIPT:M*.gcs} != ""
-CONFIGURE_SCRIPT:=${GODI_SCRIPT} ${.CURDIR}/${CONF_SCRIPT}
+
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+CONF_SCRIPT_REAL=${:! cygpath -m "${.CURDIR}/${CONF_SCRIPT}" !}
+.else
+CONF_SCRIPT_REAL=${.CURDIR}/${CONF_SCRIPT}
+.endif
+
+CONFIGURE_SCRIPT:=${GODI_SCRIPT} ${.CURDIR}/${CONF_SCRIPT_REAL}
 BUILD_DEPENDS += godi-core-script-*
 .else
 .  if defined(CONF_SCRIPT_TEXT)
@@ -231,7 +330,11 @@
 CONFIGURE_SCRIPT:=${GODI_SCRIPT} -c ${CONF_SCRIPT_FULL_TEXT:Q}
 BUILD_DEPENDS += godi-core-script>=3.0.18
 .  else
-CONFIGURE_SCRIPT:=${.CURDIR}/${CONF_SCRIPT}
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+CONFIGURE_SCRIPT=${:! cygpath -m "${.CURDIR}/${CONF_SCRIPT}" !}
+.else
+CONFIGURE_SCRIPT=${.CURDIR}/${CONF_SCRIPT}
+.endif
 .  endif
 .endif
 
@@ -426,10 +529,12 @@
 			${DEPENDS:D-set-dependencies ${DEPENDS:QQ}} \
 			${BUILD_DEPENDS:D-set-build-dependencies ${BUILD_DEPENDS:QQ}} \
 			${CONFLICTS:D-set-conflicts ${CONFLICTS:QQ}} \
-			${INSTALL_FILE:D-set-install-message-file ${INSTALL_FILE:QQ}} \
+			${INSTALL_MESSAGE_FILE:D-set-install-message-file ${INSTALL_MESSAGE_FILE:QQ}} \
 			${PKG_PRESERVE:D-set-preserve true} \
 			${INSTALL_FILE:D-set-install-script ${INSTALL_FILE:QQ}} \
 			${DEINSTALL_FILE:D-set-deinstall-script ${DEINSTALL_FILE:QQ}} \
+			${INSTALL_SCRIPT_FILE:D-set-install-script-file ${INSTALL_SCRIPT_FILE:QQ}} \
+			${DEINSTALL_SCRIPT_FILE:D-set-deinstall-script-file ${DEINSTALL_SCRIPT_FILE:QQ}} \
 			${SRC_FPRINT:D-set-src-fingerprint ${SRC_FPRINT:QQ}}
 
 
@@ -479,10 +584,11 @@
 MASTER_SITES_PROFILE?= 	${MASTER_SITE_PROFILE}
 MASTER_SITES?=		${MASTER_SITE}
 
-ALLSITES=	${MASTER_SITES_OVERRIDE} \
+ALLSITES=	${MASTER_SITES} 	 \
+		${MASTER_SITES_OVERRIDE} \
                 ${MASTER_SITES_PROFILE}  \
-                ${MASTER_SITES_BACKUP}   \
-                ${MASTER_SITES}
+                ${MASTER_SITES_BACKUP}
+
 
 # This is what is actually going to be extracted, and is overridable
 #  by user.
@@ -697,6 +803,7 @@
 	    return 1
 	fi
 	source=`cat "$PKGDIR"/.source 2>/dev/null || true`
+	source=`echo "$source" | tr -d '\r'`
         for site in $sites; do
 	    right_source=0
 	    case "$site" in
@@ -817,7 +924,7 @@
 
 _EXTRACT_SUFFICES=	.tar.gz .tgz .tar.bz2 .tbz .tar.Z .tar
 _EXTRACT_SUFFICES+=	.shar.gz .shar.bz2 .shar.Z .shar
-_EXTRACT_SUFFICES+=	.Z .bz2 .gz
+_EXTRACT_SUFFICES+=	.Z .bz2 .gz .tar.xz .txz .xz
 
 ## GODI: We do not support zip, lha, zoo
 
@@ -825,6 +932,9 @@
 DECOMPRESS_CMD.tgz=		${DECOMPRESS_CMD.tar.gz}
 DECOMPRESS_CMD.tar.bz2=	 	${BZCAT}
 DECOMPRESS_CMD.tbz=		${DECOMPRESS_CMD.tar.bz2}
+#FIXME: integrate in configure script instead of hardcoded path
+DECOMPRESS_CMD.tar.xz=	 	/bin/xzcat
+DECOMPRESS_CMD.txz=		${DECOMPRESS_CMD.tar.xz}
 DECOMPRESS_CMD.tar.Z=		${GZCAT}
 DECOMPRESS_CMD.tar=		${CAT}
 
@@ -836,6 +946,7 @@
 DECOMPRESS_CMD.Z=		${GZCAT}
 DECOMPRESS_CMD.bz2=		${BZCAT}
 DECOMPRESS_CMD.gz=		${GZCAT}
+DECOMPRESS_CMD.xz=		/bin/xzcat
 
 .undef EXTRACT_CMD.tar.gz
 .undef EXTRACT_CMD.tgz
@@ -858,6 +969,8 @@
 
 DOWNLOADED_DISTFILE=	$${extract_file}
 
+.if !defined(W32PORT) || ${W32PORT} != "mingw"
+
 .for __suffix__ in .gz .bz2 .Z
 EXTRACT_CMD${__suffix__}=	${DECOMPRESS_CMD${__suffix__}} "$${extract_file}" > `${BASENAME} "$${extract_file}" ${__suffix__}`
 .endfor
@@ -882,6 +995,28 @@
 .  endif
 .endfor
 
+.else
+
+.for __suffix__ in .gz .bz2 .Z .xz
+EXTRACT_CMD${__suffix__}=	${DECOMPRESS_CMD${__suffix__}} "$${extract_file}" > `${BASENAME} "$${extract_file}" ${__suffix__}`
+.endfor
+
+.for __suffix__ in .shar.gz .shar.bz2 .shar.Z .shar
+EXTRACT_CMD${__suffix__}=	${DECOMPRESS_CMD${__suffix__}} "$${extract_file}" | ${SH}
+.endfor
+
+_DFLT_EXTRACT_CMD=	${DECOMPRESS_CMD} "$${extract_file}" | /bin/tar --no-same-owner --no-same-permissions -xf- ${EXTRACT_ELEMENTS}
+
+.for __suffix__ in ${_EXTRACT_SUFFICES}
+.  if !defined(EXTRACT_CMD${__suffix__})
+EXTRACT_CMD${__suffix__}=	${DECOMPRESS_CMD${__suffix__}} "$${extract_file}" | /bin/tar --no-same-owner --no-same-permissions -xf- ${EXTRACT_ELEMENTS}
+.  endif
+.endfor
+
+.endif
+
+
+
 # _SHELL_EXTRACT is a "subroutine" for extracting an archive.  It extracts
 # the contents of archive named by the shell variable "extract_file" based
 # on the file extension of the archive.
@@ -902,6 +1037,9 @@
 	${_PKG_SILENT}${_PKG_DEBUG}					\
 	extract_file=${DISTDIR:Q}/${__file__:Q}; export extract_file;	\
 	cd ${WRKDIR:Q}; ${EXTRACT_CMD}
+.if defined(DISTNAME) && ${DISTNAME} != "" && ${DISTNAME} != "." && ${DISTNAME} != "./" && defined(W32PORT) && ${W32PORT} == "mingw"
+	@cd ${WRKDIR:Q} && ${LOCALBASE}/lib/godi/replacesymlinks.sh ${DISTNAME:Q}
+.endif
 .  endfor
 .  if defined(DISTNAME) && !empty(DISTNAME)
 	${MKDIR} ${WRKSRC}
@@ -1281,7 +1419,11 @@
 .if !target(do-build)
 do-build:
 .  for DIR in ${BUILD_DIRS}
+.    if !defined(USE_OMAKE)
 	${_PKG_SILENT}${_PKG_DEBUG}${_ULIMIT_CMD}cd ${DIR:Q} && ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM} ${MAKE_FLAGS} -f ${MAKEFILE:Q} ${ALL_TARGET}
+.    else
+	${_PKG_SILENT}${_PKG_DEBUG}${_ULIMIT_CMD}cd ${DIR:Q} && ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM} ${MAKE_FLAGS} ${ALL_TARGET}
+.    endif
 .  endfor
 .endif
 
@@ -1309,7 +1451,11 @@
 .if !target(do-install)
 do-install:
 .  for DIR in ${INSTALL_DIRS}
+.    if !defined(USE_OMAKE)
 	${_PKG_SILENT}${_PKG_DEBUG}${_ULIMIT_CMD}cd ${DIR:Q} && ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM} ${MAKE_FLAGS} -f ${MAKEFILE:Q} ${INSTALL_TARGET}
+.    else
+	${_PKG_SILENT}${_PKG_DEBUG}${_ULIMIT_CMD}cd ${DIR:Q} && ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM} ${MAKE_FLAGS} ${INSTALL_TARGET}
+.    endif
 .  endfor
 .endif
 
@@ -1370,7 +1516,7 @@
 	    exit 1
 	  fi
 	fi
-	out_name=`${PKG_PTOOL} -in-installed ${PKGNAME} -out-binary ${PKGREPOSITORY} -print-out-name`
+	out_name=`${PKG_PTOOL} -in-installed ${PKGNAME} -out-binary ${PKGREPOSITORY} -print-out-name | tr -d '\r'`
 	if [ -n "$out_name" ]; then
 		base_out_name=`basename "$out_name"`
 		make_package_links "$base_out_name" || exit
@@ -2174,7 +2320,7 @@
 	test -f Makefile
 	test -f DESCR
 	test -f distinfo
-	test -f PLIST -o -f PLIST.godi
+#test -f PLIST -o -f PLIST.godi
 .script
 .expand
 	${_PKG_SILENT}${_PKG_DEBUG}
@@ -2223,7 +2369,7 @@
 .script
 .expand
 	${_PKG_SILENT}${_PKG_DEBUG}
-	${MKDIR} "${EXPORT_PROFILES}"
+	${MKDIR} -p "${EXPORT_PROFILES}"
 	${PKG_TOOLS_BIN}/godi_console rprofile \
 		-site "${EXPORT_PROFILES}" \
 		-put "${EXPORT_PROFILE_NAME}"
@@ -2238,7 +2384,7 @@
 	${_PKG_SILENT}${_PKG_DEBUG}
 	${MKDIR} "${EXPORT_PACKAGES}"
 	out_name=`${PKG_PTOOL} -in-installed ${PKGNAME} \
-		-out-binary ${EXPORT_PACKAGES:QQ} -print-out-name`
+		-out-binary ${EXPORT_PACKAGES:QQ} -print-out-name | tr -d '\r'`
 	if [ -n "$$out_name" ]; then
 		${PKG_PTOOL} -in-binary "$$out_name" -out-manifest \
 			>> ${EXPORT_PACKAGES:QQ}/PKGMANIFEST
