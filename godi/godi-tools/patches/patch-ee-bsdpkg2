--- mk/build/mk/bsd.pkg.mk.orig	2013-04-14 13:03:20.000000000 +0000
+++ mk/build/mk/bsd.pkg.mk	2014-09-24 17:57:14.827000000 +0000
@@ -34,6 +34,15 @@
 # PACKAGE FIXUP
 ######################################################################
 
+.if !defined(CYGWIN_ROOT) 
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+ROOT_PATH=/
+CYGWIN_ROOT=${ROOT_PATH:n}
+.else
+CYGWIN_ROOT=
+.endif
+.endif
+
 .if !defined(DISTNAME)
 PKG_FAIL_REASON="Missing package property: DISTNAME"
 .endif
@@ -138,14 +147,14 @@
 MAKE_PROGRAM=		${GMAKE}
 .else
 .if defined(USE_OMAKE)
-MAKE_PROGRAM=		${LOCALBASE}/bin/omake
+MAKE_PROGRAM?=		${LOCALBASE}/bin/omake
 BUILD_DEPENDS+=	        godi-omake>=0:../../godi/godi-omake
 .else
 .if defined(CONF_SCRIPT) || defined(CONF_SCRIPT_TEXT)
-MAKE_PROGRAM=		${TRUE}
+MAKE_PROGRAM?=		${TRUE}
 .else
-
-MAKE_PROGRAM=		${MAKE}
+#previously this was ${MAKE}, USE_GMAKE is obsolete now
+MAKE_PROGRAM?=		${GMAKE}
 .endif
 .endif
 .endif
@@ -258,6 +267,96 @@
 ESSENTIAL_ENV:=		${ESSENTIAL_ENV} ${_var}=${_value:Q}
 .endfor
 
+.if defined(W32PORT) && ${W32PORT} == "mingw" && ( !defined(MINGW_BASE_BUILD) || ${MINGW_BASE_BUILD} == "" )
+
+.if defined(C_INCLUDE_PATH)
+C_INCLUDE_PATH:=${LOCALBASE}/include:${C_INCLUDE_PATH}
+.else
+C_INCLUDE_PATH=${LOCALBASE}/include
+.endif
+MINGW_AUTOTOOLS_ENV+=	C_INCLUDE_PATH=${C_INCLUDE_PATH}
+
+.if defined(LIBRARY_PATH)
+LIBRARY_PATH:=${LOCALBASE}/lib:${LIBRARY_PATH}
+.else
+LIBRARY_PATH=${LOCALBASE}/lib
+.endif
+MINGW_AUTOTOOLS_ENV+=	LIBRARY_PATH=${LIBRARY_PATH}
+
+# try to enforce that the right, and currently only supported compiler is used
+
+# AS, AR,... are honoured by  recent versions of autools based scripts, but also
+# many other
+# MINGW_TOOL_PREFIX should be add to godi.conf by the bootstrap script
+.if defined(MINGW_TOOL_PREFIX) && ${MINGW_TOOL_PREFIX} != ""
+CPPFLAGS+=			-I${LOCALBASE}/include
+.if !defined(NO_MINGW_TOOLS_PREFIX)
+MINGW_AUTOTOOLS_ENV+=		AR=${MINGW_TOOL_PREFIX}ar
+MINGW_AUTOTOOLS_ENV+=		AS=${MINGW_TOOL_PREFIX}as
+# better set in /opt/godi/etc/godi.conf
+# MINGW_AUTOTOOLS_ENV+=		CC=${MINGW_TOOL_PREFIX}gcc
+MINGW_AUTOTOOLS_ENV+=		CPPFILT=${MINGW_TOOL_PREFIX}c++filt
+MINGW_AUTOTOOLS_ENV+=		CXX=${MINGW_TOOL_PREFIX}g++
+MINGW_AUTOTOOLS_ENV+=		DLLTOOL=${MINGW_TOOL_PREFIX}dlltool
+MINGW_AUTOTOOLS_ENV+=		DLLWRAP=${MINGW_TOOL_PREFIX}dllwrap
+MINGW_AUTOTOOLS_ENV+=		GCOV=${MINGW_TOOL_PREFIX}gcov
+MINGW_AUTOTOOLS_ENV+=		LD=${MINGW_TOOL_PREFIX}ld
+MINGW_AUTOTOOLS_ENV+=		NM=${MINGW_TOOL_PREFIX}nm
+MINGW_AUTOTOOLS_ENV+=		OBJCOPY=${MINGW_TOOL_PREFIX}objcopy
+MINGW_AUTOTOOLS_ENV+=		OBJDUMP=${MINGW_TOOL_PREFIX}objdump
+MINGW_AUTOTOOLS_ENV+=		RANLIB=${MINGW_TOOL_PREFIX}ranlib
+MINGW_AUTOTOOLS_ENV+=		RC=${MINGW_TOOL_PREFIX}windres
+MINGW_AUTOTOOLS_ENV+=		READELF=${MINGW_TOOL_PREFIX}readelf
+MINGW_AUTOTOOLS_ENV+=		SIZE=${MINGW_TOOL_PREFIX}size
+MINGW_AUTOTOOLS_ENV+=		STRINGS=${MINGW_TOOL_PREFIX}strings
+MINGW_AUTOTOOLS_ENV+=		STRIP=${MINGW_TOOL_PREFIX}strip
+MINGW_AUTOTOOLS_ENV+=		WINDMC=${MINGW_TOOL_PREFIX}windmc
+MINGW_AUTOTOOLS_ENV+=		WINDRES=${MINGW_TOOL_PREFIX}windres
+CPP=				${MINGW_TOOL_PREFIX}cpp
+.else
+CPP=
+.endif
+
+MAKE_ENV+=	${MINGW_AUTOTOOLS_ENV}
+CONFIGURE_ENV+=	${MINGW_AUTOTOOLS_ENV}
+
+MAKE_ENV+=	PKG_CONFIG_LIBDIR=${LOCALBASE_NATIVE:Q}/lib/pkgconfig
+CONFIGURE_ENV+= PKG_CONFIG_LIBDIR=${LOCALBASE_NATIVE:Q}/lib/pkgconfig
+.endif
+
+#.if defined(MINGW_BIN_PATH) && ${MINGW_BIN_PATH} != ""
+# eg. /usr/x86_64-w64-mingw32/bin contains unprefixd versions of ld , strip, ...
+# however there is no unprefixed version for e.g. gcc
+# MINGW_BIN_PATH should be add to godi.conf by the bootsrap script
+#PATH:=		${MINGW_BIN_PATH}:${PATH}
+#.endif
+
+.if defined(MINGW_AUTOTOOLS_BUILD) && defined(MINGW_HOST) && ${MINGW_HOST} != ""
+# the x86_64-w64-mingw32/it686-w64-mingw32 packages from cygwin are cross
+# compilers. They are 32-bit cygwin programs, but can(!) compile to
+# code that is independend of cygwin. We need to tell configure scripts
+# that we want to do this.
+# MINGW_HOST should be add to godi.conf by the bootstrap script.
+# User can change it, if they want to generate faster code that is
+# restricted to their cpu
+.if defined(CYGWIN_WORDSIZE) && ${CYGWIN_WORDSIZE} == 64
+CONFIGURE_ARGS+=	--host=${MINGW_HOST} --build=x86_64-pc-cygwin
+.else
+CONFIGURE_ARGS+=	--host=${MINGW_HOST} --build=i686-pc-cygwin
+.endif
+
+.endif
+
+.if defined(USE_OMAKE)
+MAKE_FLAGS+= 	LDFLAGS=${LDFLAGS:Q}
+MAKE_FLAGS+= 	CFLAGS=${CFLAGS:Q}
+.endif
+
+
+.endif
+
+.if !defined(MINGW_BASE_BUILD) || ${MINGW_BASE_BUILD} == ""
+
 # How to invoke "make" in wrkdir to build and install the software:
 MAKE_ENV+=		OPSYS=${OPSYS:Q}
 .if defined(W32PORT)
@@ -274,7 +373,16 @@
 MAKE_ENV+=		WHOLE_ARCHIVE_FLAG=${WHOLE_ARCHIVE_FLAG:Q}
 MAKE_ENV+=		NO_WHOLE_ARCHIVE_FLAG=${NO_WHOLE_ARCHIVE_FLAG:Q}
 MAKE_ENV+=		LINK_ALL_LIBGCC_HACK=${LINK_ALL_LIBGCC_HACK:Q}
+
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+# We always need a backup copy of flexdll because of circular dependencies
+# The files at ${LOCALBASE:Q}/lib/flexdll-backup are added during the deinstallation
+# of godi-flexdll
+MAKE_ENV+=		PATH=${LOCALBASE:Q}/bin:${LOCALBASE:Q}/lib/flexdll-backup/bin:${PATH:Q}
+.else
 MAKE_ENV+=		PATH=${LOCALBASE:Q}/bin:${PATH:Q}
+.endif
+
 MAKE_ENV+=		PREFIX=${PREFIX:Q}
 MAKE_ENV+= 		LOCALBASE=${LOCALBASE:Q}
 MAKE_ENV+= 		LOCALBASE_NATIVE=${LOCALBASE_NATIVE:Q}
@@ -295,6 +403,8 @@
 MAKE_ENV+=		${ESSENTIAL_ENV}
 .endif
 
+.endif # MINGW_BASE_BUILD
+
 # Extra variables for build:
 BUILD_ENV?=		${MAKE_ENV}
 
@@ -304,6 +414,7 @@
 # Extra variables for install:
 INSTALL_ENV?=		${MAKE_ENV}
 
+.if !defined(MINGW_BASE_BUILD) || ${MINGW_BASE_BUILD} == ""
 # How to invoke "configure" in wrkdir to configure the software:
 CONFIGURE_ENV+=		OPSYS=${OPSYS:Q}
 .if defined(W32PORT)
@@ -317,7 +428,12 @@
 CONFIGURE_ENV+=		ELF_RPATH_FLAG=${ELF_RPATH_FLAG:Q}
 CONFIGURE_ENV+=		RPATH_FLAG=${RPATH_FLAG:Q}
 .endif
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+# see corresponding comment at MAKE_ENV
+CONFIGURE_ENV+=		PATH=${LOCALBASE:Q}/bin:${LOCALBASE:Q}/lib/flexdll-backup/bin:${PATH:Q}
+.else
 CONFIGURE_ENV+=		PATH=${LOCALBASE:Q}/bin:${PATH:Q}
+.endif
 CONFIGURE_ENV+=		PREFIX=${PREFIX:Q}
 CONFIGURE_ENV+= 	LOCALBASE=${LOCALBASE:Q}
 CONFIGURE_ENV+= 	LOCALBASE_NATIVE=${LOCALBASE_NATIVE:Q}
@@ -327,7 +443,8 @@
 CONFIGURE_ENV+=		ac_given_INSTALL=${INSTALL:Q}\ -c
 CONFIGURE_ENV+=		INSTALL_DATA=${INSTALL_DATA:Q}
 CONFIGURE_ENV+=		INSTALL_PROGRAM=${INSTALL_PROGRAM:Q}
-CONFIGURE_ENV+=		INSTALL_SCRIPT=${INSTALL_SCRIPT:Q}
+# breaks autotools
+#CONFIGURE_ENV+=	INSTALL_SCRIPT=${INSTALL_SCRIPT:Q}
 CONFIGURE_ENV+=		M4=${M4:Q}
 CONFIGURE_ENV+=		AWK=${AWK:Q}
 .if defined(CC)
@@ -337,6 +454,8 @@
 CONFIGURE_ENV+=		CPP=${CPP:Q}
 .endif
 
+.endif # MINGW_BASE_BUILD
+
 # Passed to most of script invocations
 SCRIPTS_ENV+= CURDIR=${.CURDIR:Q} DISTDIR=${DISTDIR:Q} \
 	PATH=${LOCALBASE:Q}/bin:${PATH:Q} \
@@ -351,7 +470,7 @@
 BUILD_DEFS+=	CPPFLAGS CFLAGS LDFLAGS
 BUILD_DEFS+=	CONFIGURE_ENV CONFIGURE_ARGS
 
-LOCALBASE_DIRS = bin doc etc lib libexec man sbin share var include
+LOCALBASE_DIRS = bin doc etc gui lib libexec man sbin share var include
 
 ######################################################################
 # CONFIGURE STAGE
@@ -390,7 +509,14 @@
 GODI_SCRIPT ?= ${LOCALBASE}/bin/godi_script
 
 .if defined(CONF_SCRIPT) && ${CONF_SCRIPT:M*.gcs} != ""
-CONFIGURE_SCRIPT:=${GODI_SCRIPT} ${.CURDIR}/${CONF_SCRIPT}
+
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+CONF_SCRIPT_REAL=${CYGWIN_ROOT}${.CURDIR}/${CONF_SCRIPT}
+.else
+CONF_SCRIPT_REAL=${.CURDIR}/${CONF_SCRIPT}
+.endif
+
+CONFIGURE_SCRIPT:=${GODI_SCRIPT} ${.CURDIR}/${CONF_SCRIPT_REAL}
 BUILD_DEPENDS += godi-core-script-*
 .else
 .  if defined(CONF_SCRIPT_TEXT)
@@ -406,13 +532,248 @@
 CONFIGURE_SCRIPT:=${GODI_SCRIPT} -c ${CONF_SCRIPT_FULL_TEXT:Q}
 BUILD_DEPENDS += godi-core-script>=3.0.18
 .  else
-CONFIGURE_SCRIPT:=${.CURDIR}/${CONF_SCRIPT}
+.if defined(W32PORT) && ${W32PORT} == "mingw"
+CONFIGURE_SCRIPT=${CYGWIN_ROOT}${.CURDIR}/${CONF_SCRIPT}
+.else
+CONFIGURE_SCRIPT=${.CURDIR}/${CONF_SCRIPT}
+.endif
 .  endif
 .endif
 
 CONFIGURE_ARGS:=${CONF_SCRIPT_ARGS}
 .endif
 
+### WINGMAKE ###
+.if defined(WINGMAKE) && ${WINGMAKE} == "yes"
+MAINTAINER?=		gmake@ml.ignorelist.com
+MAKE_PROGRAM=		${GMAKE}
+
+IMAGE_DIR=		${WRKDIR}/image
+
+AUTOGENERATE_PLIST=	yes
+AUTOGENERATE_IMAGE=	${CYGWIN_ROOT}${IMAGE_DIR}${LOCALBASE}
+
+CONFIGURE_ENV+=		${BUILD_OCAMLFIND_ENV}
+MAKE_ENV+=		${BUILD_OCAMLFIND_ENV}
+
+CONFIGURE_ENV+=		OCAMLFIND_DESTDIR=${AUTOGENERATE_IMAGE:Q}/lib/ocaml/pkg-lib
+MAKE_ENV+=		OCAMLFIND_DESTDIR=${AUTOGENERATE_IMAGE:Q}/lib/ocaml/pkg-lib
+INSTALL_ENV+=		OCAMLFIND_DESTDIR=${AUTOGENERATE_IMAGE:Q}/lib/ocaml/pkg-lib
+
+CONFIGURE_SCRIPT?=	${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} wingmake-configure
+
+.if defined(HAS_CONFIGURE) && ${HAS_CONFIGURE} == "yes"
+WINGMAKE_CONFIGURE?=	${WRKSRC}/configure
+.else
+WINGMAKE_CONFIGURE?=	no
+HAS_CONFIGURE=		yes
+.endif
+
+wingmake-configure:
+.script
+.  import LOCALBASE WRKSRC PKGDIR CHMOD
+.  import WINGMAKE_CONFIGURE CONFIGURE_ARGS PAX
+.  expand
+	${_PKG_SILENT}${_PKG_DEBUG}
+.  noexpand
+set -e
+unset DEBUG PROFILE TEST TESTS
+if [ -d "${PKGDIR}/files" ]; then
+  files_found=0
+  cd "${PKGDIR}/files"
+  for f in * .* ; do
+    if [ -e "$f" ]; then
+      files_found=1;
+      break;
+    fi
+  done
+  if [ $files_found -eq 1 ]; then
+    ${PAX} -rw -pp . "${WRKSRC}"
+  fi
+fi
+cd "$WRKSRC"
+if [ "$WINGMAKE_CONFIGURE" != "no" ]; then
+  case "${WINGMAKE_CONFIGURE}" in
+    "${WRKSRC}"*)
+	if [ -f "${WINGMAKE_CONFIGURE}" ]; then
+          ${CHMOD} 0755 "${WINGMAKE_CONFIGURE}"
+	fi
+	;;
+  esac
+
+  if [ -z "$CONFIGURE_ARGS" ]; then
+	${WINGMAKE_CONFIGURE}
+  else
+	${WINGMAKE_CONFIGURE} ${CONFIGURE_ARGS}
+  fi
+fi
+.endscript
+
+MAKE_FLAGS+=	DESTDIR=${IMAGE_DIR:Q}
+INSTALL_SCRIPT?= ${GMAKE} -C ${WRKSRC:Q} ${MAKE_FLAGS} -f ${MAKEFILE:Q} ${INSTALL_TARGET} && \
+	${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} destdir-copy-docs
+
+.endif
+### END WINGMAKE ###
+
+### START WINPKG ###
+.if defined(WINPKG) && ${WINPKG} == "yes"
+BUILD_DEPENDS+= godi-opam-installer>=1.0:../../godi/godi-opam-installer
+BUILD_DEPENDS+= godi-findlib>=1.0:../../godi/godi-findlib
+
+MAINTAINER?=		pkg@ml.ignorelist.com
+IMAGE_DIR=		${WRKDIR}/image
+
+AUTOGENERATE_PLIST=	yes
+AUTOGENERATE_IMAGE=	${CYGWIN_ROOT}${IMAGE_DIR}${LOCALBASE}
+
+CONFIGURE_ENV+=		${BUILD_OCAMLFIND_ENV}
+MAKE_ENV+=		${BUILD_OCAMLFIND_ENV}
+
+CONFIGURE_ENV+=		OCAMLFIND_DESTDIR=${AUTOGENERATE_IMAGE:Q}/lib/ocaml/pkg-lib
+MAKE_ENV+=		OCAMLFIND_DESTDIR=${AUTOGENERATE_IMAGE:Q}/lib/ocaml/pkg-lib
+INSTALL_ENV+=		OCAMLFIND_DESTDIR=${AUTOGENERATE_IMAGE:Q}/lib/ocaml/pkg-lib
+
+CONFIGURE_SCRIPT?=	${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} winpkg-configure
+
+.if defined(HAS_CONFIGURE) && ${HAS_CONFIGURE} == "yes"
+WINPKG_CONFIGURE?=	${WRKSRC}/configure
+.else
+WINPKG_CONFIGURE?=	no
+HAS_CONFIGURE=		yes
+.endif
+
+winpkg-configure:
+.script
+.  import LOCALBASE WRKSRC PKGDIR CHMOD
+.  import WINPKG_CONFIGURE CONFIGURE_ARGS PAX
+.  expand
+	${_PKG_SILENT}${_PKG_DEBUG}
+.  noexpand
+set -e
+unset DEBUG PROFILE TEST TESTS
+if [ -d "${PKGDIR}/files" ]; then
+  files_found=0
+  cd "${PKGDIR}/files"
+  for f in * .* ; do
+    if [ -e "$f" ]; then
+      files_found=1;
+      break;
+    fi
+  done
+  if [ $files_found -eq 1 ]; then
+    ${PAX} -rw -pp . "${WRKSRC}"
+  fi
+fi
+cd "$WRKSRC"
+if [ "$WINPKG_CONFIGURE" != "no" ]; then
+  case "${WINPKG_CONFIGURE}" in
+    "${WRKSRC}"*)
+	if [ -f "${WINPKG_CONFIGURE}" ]; then
+          ${CHMOD} 0755 "${WINPKG_CONFIGURE}"
+	fi
+	;;
+  esac
+
+  if [ -z "$CONFIGURE_ARGS" ]; then
+	${WINPKG_CONFIGURE}
+  else
+	${WINPKG_CONFIGURE} ${CONFIGURE_ARGS}
+  fi
+fi
+.endscript
+
+
+WINPKG_BUILD_SCRIPT?=	${CYGWIN_ROOT:Q}${WRKSRC:Q}/pkg/build.ml
+
+BUILD_SCRIPT=	${LOCALBASE:Q}/bin/ocaml.exe ${WINPKG_BUILD_SCRIPT}
+
+.if !defined(${GODI_WINPKG_NO_OPT}) && ${GODI_HAVE_OCAMLOPT} == "yes"
+BUILD_SCRIPT+=  native=true
+.if !defined(${GODI_WINPKG_NO_NATIVE_DYNLINK})
+BUILD_SCRIPT+=  native-dynlink=true
+.endif
+.endif
+
+
+WINPKG_INSTALL_FILE?=	${CYGWIN_ROOT:Q}${WRKSRC:Q}/${PKGBASE:C/^[^-]*-//}.install
+
+INSTALL_SCRIPT?= ${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} destdir-copy-docs && \
+	${SETENV} ${INSTALL_ENV} ${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} winpkg-install
+
+winpkg-install:
+.script
+.  import FIND LOCALBASE RM WRKSRC MV
+.  import WINPKG_INSTALL_FILE
+.  import AUTOGENERATE_IMAGE
+.  import MKDIR FILE_CMD BASENAME
+.  import PKGBASE
+.  expand
+	${_PKG_SILENT}${_PKG_DEBUG}
+.  noexpand
+set -e
+
+cd "${WRKSRC}"
+"${LOCALBASE}/sbin/opam-installer.exe" --prefix="${AUTOGENERATE_IMAGE}" "${WINPKG_INSTALL_FILE}"
+cd "$(cygpath "${AUTOGENERATE_IMAGE}")"
+${FIND} . -type d -empty -delete
+${MKDIR} -p lib/ocaml/pkg-lib
+${MKDIR} -p doc
+
+if [ -d "bin" ]; then
+    cd bin
+    for f in * ; do
+        [ ! -f "$f" ] && continue
+        case "$f" in
+            *.*)
+                continue ;;
+            *)
+		type="$(${FILE_CMD} -b "$f")"
+		case "$type" in
+		  *text*) continue;;
+		  *script*) continue ;;
+		  *executable*)
+                    mv "$f" "${f}.exe" ;;
+                esac
+        esac
+    done
+    cd ..
+fi
+cd lib
+for f in * ; do
+    [ ! -d "$f" ] && continue
+    if [ "$f" != "ocaml" ]; then
+       mv "$f" ocaml/pkg-lib
+    fi
+done
+cd ..
+${FIND} . -type d -empty -delete
+if [ -d doc ]; then
+  cd doc
+  for d in * ; do
+    [ ! -d "$d" ] && continue
+    cd "$d"
+    if [ "$d" = "$PKGBASE" ]; then
+      basename="$($BASENAME "${WINPKG_INSTALL_FILE}")"
+      if [ -n "$basename" ] && [ -f "$basename" ]; then
+        ${RM} -f "$basename"
+      fi
+    else
+      ${MV} -f ./* "../${PKGBASE}"
+    fi
+    cd ..
+  done
+  cd ..
+fi
+${FIND} . -type d -empty -delete
+.endscript
+
+
+.endif
+### END WINPKG ###
+
+
+
 
 # --- OASIS ---
 
@@ -442,6 +803,104 @@
 AUTOGENERATE_IMAGE=	${WRKDIR}/image/${LOCALBASE}
 .endif
 
+# --- WINOASIS ---
+.if defined(WINOASIS) && ${WINOASIS} == "yes"
+HAS_CONFIGURE=		yes
+WINOASIS_SETUP?=	no
+WINOASIS_DISABLE_DEBUG?=no
+WINOASIS_DISABLE_DOCS?=	no
+WINOASIS_DISABLE_TESTS?=no
+WINOASIS_USE_BASH?=	yes
+MAINTAINER?=		oasis@ml.ignorelist.com
+
+CONFIGURE_ENV+=	${BUILD_OCAMLFIND_ENV}
+MAKE_ENV+=	${BUILD_OCAMLFIND_ENV}
+
+IMAGE_DIR=		${WRKDIR}/image
+CONFIGURE_ARGS+= --prefix ${LOCALBASE:Q}
+CONFIGURE_ARGS+= --docdir ${LOCALBASE:Q}/doc/${PKGBASE:Q}
+CONFIGURE_ARGS+= --mandir  ${LOCALBASE:Q}/man
+CONFIGURE_ARGS+= --datadir ${LOCALBASE:Q}/share
+CONFIGURE_ARGS+= --destdir ${CYGWIN_ROOT:Q}${WRKDIR:Q}/image
+
+AUTOGENERATE_PLIST=	yes
+AUTOGENERATE_IMAGE=	${CYGWIN_ROOT}${IMAGE_DIR}${LOCALBASE}
+INSTALL_ENV+=		OCAMLFIND_DESTDIR=${AUTOGENERATE_IMAGE:Q}/lib/ocaml/pkg-lib
+
+.if ${WINOASIS_DISABLE_TESTS} == "yes"
+CONFIGURE_ARGS+= --disable-tests
+.elif ${WINOASIS_DISABLE_TESTS} == "no"
+CONFIGURE_ARGS+= --enable-tests
+.endif
+
+.if ${WINOASIS_DISABLE_DOCS} == "yes"
+CONFIGURE_ARGS+= --disable-docs
+.elif ${WINOASIS_DISABLE_DOCS} == "no"
+CONFIGURE_ARGS+= --enable-docs
+.endif
+
+.if ${WINOASIS_DISABLE_DEBUG} == "yes"
+CONFIGURE_ARGS+= --disable-debug
+.elif ${WINOASIS_DISABLE_DEBUG} == "no"
+CONFIGURE_ARGS+= --enable-debug
+.endif
+
+.if ${WINOASIS_USE_BASH} == "yes"
+CONFIGURE_ARGS+= --use-bash ${CYGWIN_ROOT:Q}/bin/dash.exe
+.endif
+
+.if ${WINOASIS_SETUP} == "yes"
+BUILD_DEPENDS+= apps-oasis>0.3.0:../../apps/apps-oasis
+.endif
+
+CONFIGURE_SCRIPT?= ${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} winoasis-configure
+
+winoasis-configure:
+.script
+.  import LOCALBASE WRKSRC PKGDIR
+.  import WINOASIS_SETUP CONFIGURE_ARGS
+.  expand
+	${_PKG_SILENT}${_PKG_DEBUG}
+.  noexpand
+set -e
+unset DEBUG PROFILE TEST TESTS
+cd "$WRKSRC"
+if [ "$WINOASIS_SETUP" = "yes" ]; then
+	${LOCALBASE}/bin/oasis setup
+elif [ -f "${PKGDIR}/files/oasis_setup.ml" ]; then
+	cp "${PKGDIR}/files/oasis_setup.ml" "${WRKSRC}/setup.ml"
+	if [ -f "${PKGDIR}/files/oasis_myocamlbuild.ml" ] && [ -f "${WRKSRC}/myocamlbuild.ml" ]; then
+		cp "${PKGDIR}/files/oasis_myocamlbuild.ml" "${WRKSRC}/myocamlbuild.ml"
+	fi
+fi
+${LOCALBASE}/bin/ocaml -w -A setup.ml -configure $CONFIGURE_ARGS
+.endscript
+
+
+
+BUILD_SCRIPT?=	${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} winoasis-build
+
+winoasis-build:
+	@cd ${WRKSRC:Q} && ${LOCALBASE}/bin/ocaml -w -A setup.ml -build
+.if	${WINOASIS_DISABLE_TESTS} == "no" 
+	@cd ${WRKSRC:Q} && ${LOCALBASE}/bin/ocaml -w -A setup.ml -test
+.endif
+.if	${WINOASIS_DISABLE_DOCS} == "no" 
+	@cd ${WRKSRC:Q} && ${LOCALBASE}/bin/ocaml -w -A setup.ml -doc
+.endif
+
+#INSTALL_SCRIPT?= ${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} winoasis-install
+#winoasis-install:
+#	@cd ${WRKSRC:Q} && ${SETENV} ${INSTALL_ENV} ${LOCALBASE}/bin/ocaml -w -A setup.ml -install
+#	@${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} destdir-copy-docs
+
+INSTALL_SCRIPT?= ${TRUE} && cd ${WRKSRC:Q} && \
+	${SETENV} ${INSTALL_ENV} ${LOCALBASE}/bin/ocaml -w -A setup.ml -install && \
+	${MAKE} -C ${PKGDIR:Q} ${MAKEFLAGS} destdir-copy-docs
+
+.endif
+# --- END WINOASIS ---
+
 
 # --- other ---
 
@@ -450,7 +909,14 @@
 CONFIGURE_ENV+=		${ESSENTIAL_ENV}
 .endif
 
-#
+
+# temporary hack until default manifest is shipped by mingw-w64 itself
+.if !defined(NO_FLEXLINK_MANIFEST_HACK)
+CONFIGURE_ENV+=		FLEXLINK_MANIFEST_HACK=yes
+MAKE_ENV+=		FLEXLINK_MANIFEST_HACK=yes
+INSTALL_ENV+=		FLEXLINK_MANIFEST_HACK=yes
+.endif
+
 # Config file related settings - see Packages.txt
 #
 PKG_SYSCONFVAR?=	${PKGBASE}
@@ -623,10 +1089,12 @@
 			${DEPENDS:D-set-dependencies ${DEPENDS:QQ}} \
 			${BUILD_DEPENDS:D-set-build-dependencies ${BUILD_DEPENDS:QQ}} \
 			${CONFLICTS:D-set-conflicts ${CONFLICTS:QQ}} \
-			${INSTALL_FILE:D-set-install-message-file ${INSTALL_FILE:QQ}} \
+			${INSTALL_MESSAGE_FILE:D-set-install-message-file ${INSTALL_MESSAGE_FILE:QQ}} \
 			${PKG_PRESERVE:D-set-preserve true} \
 			${INSTALL_FILE:D-set-install-script ${INSTALL_FILE:QQ}} \
 			${DEINSTALL_FILE:D-set-deinstall-script ${DEINSTALL_FILE:QQ}} \
+			${INSTALL_SCRIPT_FILE:D-set-install-script-file ${INSTALL_SCRIPT_FILE:QQ}} \
+			${DEINSTALL_SCRIPT_FILE:D-set-deinstall-script-file ${DEINSTALL_SCRIPT_FILE:QQ}} \
 			${SRC_FPRINT:D-set-src-fingerprint ${SRC_FPRINT:QQ}}
 
 ######################################################################
@@ -637,15 +1105,23 @@
 INSTALL_TARGET?=	install
 
 CONFIGURE_SCRIPT?=	./configure
+.if !defined(USE_OMAKE)
 BUILD_SCRIPT?=		${MAKE_PROGRAM} ${MAKE_FLAGS} -f ${MAKEFILE:Q} \
 			  ${ALL_TARGET}
+INSTALL_SCRIPT?=	${MAKE_PROGRAM} ${MAKE_FLAGS} -f ${MAKEFILE:Q} \
+			  ${INSTALL_TARGET}
 .if defined(TEST_TARGET)
 TEST_SCRIPT?=		${MAKE_PROGRAM} ${MAKE_FLAGS} -f ${MAKEFILE:Q} \
 			  ${TEST_TARGET}
 .endif
+.else
+BUILD_SCRIPT?=		${MAKE_PROGRAM} ${MAKE_FLAGS} ${ALL_TARGET}
+INSTALL_SCRIPT?=	${MAKE_PROGRAM} ${MAKE_FLAGS} ${INSTALL_TARGET}
+.if defined(TEST_TARGET)
+TEST_SCRIPT?=		${MAKE_PROGRAM} ${MAKE_FLAGS} ${TEST_TARGET}
+.endif
+.endif
 
-INSTALL_SCRIPT?=	${MAKE_PROGRAM} ${MAKE_FLAGS} -f ${MAKEFILE:Q} \
-			  ${INSTALL_TARGET}
 
 ALLFILES?=	${DISTFILES}
 CKSUMFILES?=	${ALLFILES}
@@ -934,6 +1410,7 @@
 	    return 1
 	fi
 	source=`cat "$PKGDIR"/.source 2>/dev/null || true`
+	source=`echo "$source" | tr -d '\r'`
         for site in $sites; do
 	    right_source=0
 	    case "$site" in
@@ -1118,7 +1595,7 @@
 
 _EXTRACT_SUFFICES=	.tar.gz .tgz .tar.bz2 .tbz .tar.Z .tar
 _EXTRACT_SUFFICES+=	.shar.gz .shar.bz2 .shar.Z .shar
-_EXTRACT_SUFFICES+=	.Z .bz2 .gz
+_EXTRACT_SUFFICES+=	.Z .bz2 .gz .tar.xz .txz .xz .lzma
 
 ## GODI: We do not support zip, lha, zoo
 
@@ -1126,6 +1603,10 @@
 DECOMPRESS_CMD.tgz=		${DECOMPRESS_CMD.tar.gz}
 DECOMPRESS_CMD.tar.bz2=	 	${BZCAT}
 DECOMPRESS_CMD.tbz=		${DECOMPRESS_CMD.tar.bz2}
+#FIXME: integrate in configure script instead of hardcoded path
+DECOMPRESS_CMD.tar.xz=	 	/bin/xzcat
+DECOMPRESS_CMD.txz=		${DECOMPRESS_CMD.tar.xz}
+DECOMPRESS_CMD.tar.lzma=	/bin/lzcat
 DECOMPRESS_CMD.tar.Z=		${GZCAT}
 DECOMPRESS_CMD.tar=		${CAT}
 
@@ -1137,6 +1618,8 @@
 DECOMPRESS_CMD.Z=		${GZCAT}
 DECOMPRESS_CMD.bz2=		${BZCAT}
 DECOMPRESS_CMD.gz=		${GZCAT}
+DECOMPRESS_CMD.lzma=		/bin/lzcat
+DECOMPRESS_CMD.xz=		/bin/xzcat
 
 .undef EXTRACT_CMD.tar.gz
 .undef EXTRACT_CMD.tgz
@@ -1157,6 +1640,8 @@
 
 DOWNLOADED_DISTFILE=	$${extract_file}
 
+.if !defined(W32PORT) || ${W32PORT} != "mingw"
+
 .for __suffix__ in .gz .bz2 .Z
 EXTRACT_CMD${__suffix__}=	${DECOMPRESS_CMD${__suffix__}} "$${extract_file}" > `${BASENAME} "$${extract_file}" ${__suffix__}`
 .endfor
@@ -1181,6 +1666,28 @@
 .  endif
 .endfor
 
+.else
+
+.for __suffix__ in .gz .bz2 .Z .xz
+EXTRACT_CMD${__suffix__}=	${DECOMPRESS_CMD${__suffix__}} "$${extract_file}" > `${BASENAME} "$${extract_file}" ${__suffix__}`
+.endfor
+
+.for __suffix__ in .shar.gz .shar.bz2 .shar.Z .shar
+EXTRACT_CMD${__suffix__}=	${DECOMPRESS_CMD${__suffix__}} "$${extract_file}" | ${SH}
+.endfor
+
+_DFLT_EXTRACT_CMD=	${DECOMPRESS_CMD} "$${extract_file}" | /bin/tar --no-same-owner --no-same-permissions -xf- ${EXTRACT_ELEMENTS}
+
+.for __suffix__ in ${_EXTRACT_SUFFICES}
+.  if !defined(EXTRACT_CMD${__suffix__})
+EXTRACT_CMD${__suffix__}=	${DECOMPRESS_CMD${__suffix__}} "$${extract_file}" | /bin/tar --no-same-owner --no-same-permissions -xf- ${EXTRACT_ELEMENTS}
+.  endif
+.endfor
+
+.endif
+
+
+
 # _SHELL_EXTRACT is a "subroutine" for extracting an archive.  It extracts
 # the contents of archive named by the shell variable "extract_file" based
 # on the file extension of the archive.
@@ -1201,6 +1708,9 @@
 	${_PKG_SILENT}${_PKG_DEBUG}					\
 	extract_file=${DISTDIR:Q}/${__file__:Q}; export extract_file;	\
 	cd ${WRKDIR:Q}; ${EXTRACT_CMD}
+.if defined(DISTNAME) && ${DISTNAME} != "" && ${DISTNAME} != "." && ${DISTNAME} != "./" && defined(W32PORT) && ${W32PORT} == "mingw"
+	@cd ${WRKDIR:Q} && ${LOCALBASE}/lib/godi/replacesymlinks.sh ${DISTNAME:Q}
+.endif
 .  endfor
 .  if defined(DISTNAME) && !empty(DISTNAME)
 	${MKDIR} ${WRKSRC}
@@ -1227,10 +1737,7 @@
 PATCH_SORT_FN=
 .text
 patch_sort() {
-    $SED -e '/^.*-\*/ d' | 
-    $SED -e 's:^\(.*/[^/-]*\)-\([^/]*\)$:\1-\2 \2:' |
-    LC_ALL=C $SORT -k 2 |
-    $SED -e 's/^\([^ ]\+\) .*$/\1/'
+    echo "$@" | $SED -e '/^.*-\*/ d' | $SED -e 's:^\(.*/[^/-]*\)-\([^/]*\)$:\1-\2 \2:' | LC_ALL=C $SORT -k 2 | $SED -e 's/^\([^ ]\+\) .*$/\1/'
 }
 .endtext
 
@@ -1276,16 +1783,13 @@
 	vfy_patchlist=""
 	patchlist=""
 	if [ -d "$PATCHDIR" ]; then
-	    vfy_patchlist=`$LS "$PATCHDIR"/file-* \
-			       "$PATCHDIR"/patch-* 2>/dev/null | patch_sort`
+	    vfy_patchlist="$(patch_sort "$($LS "$PATCHDIR"/file-* "$PATCHDIR"/patch-* 2>/dev/null)")"
 	fi
         if [ -n "$_PROFILEPATCHFILES" ]; then
-	    patchlist=`$LS "$_PROFILEPATCHFILES"/file-* \
-                           "$_PROFILEPATCHFILES"/patch-* 2>/dev/null | patch_sort`
+	    patchlist="$(patch_sort "$($LS "$_PROFILEPATCHFILES"/file-* "$_PROFILEPATCHFILES"/patch-* 2>/dev/null)")"
         fi
         if [ -n "$_LOCALPATCHFILES" ]; then
-	    files=`$LS "$_LOCALPATCHFILES"/file-* \
-		       "$_LOCALPATCHFILES"/patch-* 2>/dev/null | patch_sort`
+	    files="$(patch_sort "$($LS "$_LOCALPATCHFILES"/file-* "$_LOCALPATCHFILES"/patch-* 2>/dev/null)")"
 	    patchlist="$patchlist $files"
         fi
 	if [ -n "$vfy_patchlist" -o -n "$patchlist" ]; then
@@ -1378,7 +1882,8 @@
 INCR_PATCH_FN=
 .text
 incr_patch() {
-    ocaml /dev/stdin "$1" <<'EOF'
+    tmpx="$(mktemp)"
+    cat - >"$tmpx"  <<'EOF'
 (* --- ocaml script --- *)
 let p = Sys.argv.(1);;
 let c1 =
@@ -1405,10 +1910,263 @@
 print_endline q;;
 (* --- END ocaml script '` --- *)
 EOF
+  ocaml -w -A "$(cygpath -m "$tmpx")" "$1"
+  rm "$tmpx"
 }
 .endtext
 
 
+DOCUMENT_FILES?=
+DOCUMENT_FILES_IGNORE?=
+DOCUMENT_DIRS?=
+IMPORT_FILES?=
+DOCUMENT_NO_AUTO?=0
+.PHONY: destdir-copy-docs
+.if !target(destdir-copy-docs)
+destdir-copy-docs:
+.script
+.	import LOCALBASE WRKSRC PKGBASE IMAGE_DIR INSTALL
+.	import FILE_CMD TR MKDIR BASENAME DIRNAME PAX
+.	import DOCUMENT_FILES DOCUMENT_FILES_IGNORE DOCUMENT_DIRS DOCUMENT_NO_AUTO
+.	import IMPORT_FILES MV
+.	expand
+		${_PKG_SILENT}${_PKG_DEBUG}
+.	noexpand
+set -e
+set -u
+
+if [ -n "${IMPORT_FILES}" ]; then
+  cd "${LOCALBASE}"
+  for f in ${IMPORT_FILES}; do
+    if [ -z "$f" ] || [ ! -e "$f" ] ; then
+      continue
+    fi
+    aim="${IMAGE_DIR}${LOCALBASE}"
+    dirname="$($DIRNAME "$f")"
+    basename="$($BASENAME "$f")"
+    if [ -n "$dirname" ] && [ "$dirname" != "." ] ; then
+      aim="${aim}/${dirname}"
+      ${MKDIR} "$aim"
+      cd "$dirname"
+    fi
+    ${MV} "$basename" "$aim"
+    cd "${LOCALBASE}"
+  done
+fi
+
+doc_dir="${IMAGE_DIR}${LOCALBASE}/doc/${PKGBASE}"
+if [ ! -d "$doc_dir" ]; then
+    ${MKDIR} "$doc_dir"
+fi
+cd "$WRKSRC"
+
+if [ -n "${DOCUMENT_DIRS}" ]; then
+    for d in "${DOCUMENT_DIRS}" ; do
+        if [ -z "$d" ] || [ ! -d "$d" ] ; then
+            exit 1
+        fi
+        dirname="$($DIRNAME "$d")"
+        basename="$($BASENAME "$d")"
+        cd "$dirname"
+        ${PAX} -rw -pp "$basename" "${doc_dir}"
+        cd "$WRKSRC"
+    done
+fi
+
+if [ -n "${DOCUMENT_FILES}" ]; then
+    for f in ${DOCUMENT_FILES} ; do
+        ${INSTALL} -m 0444 "$f" "${doc_dir}"
+    done
+fi
+
+if [ -n "$DOCUMENT_NO_AUTO" ] ; then
+    case "$DOCUMENT_NO_AUTO" in
+        1*) exit 0 ;;
+        Y*) exit 0 ;;
+        y*) exit 0 ;;
+        t*) exit 0 ;;
+        T*) exit 0 ;;
+    esac
+fi
+
+do_install(){
+    local do_copy
+    do_copy=1
+    if [ -n "${DOCUMENT_FILES_IGNORE}" ]; then
+        for f in ${DOCUMENT_FILES_IGNORE} ; do
+            if [ "$f" = "$1" ]; then
+                do_copy=0
+                break
+            fi
+        done
+    fi
+    if [ ${do_copy} -eq 1 ] && [ -f "$1" ]; then
+        dst="${doc_dir}/$1"
+        if [ ! -e "$dst" ]; then
+            ${INSTALL} -m 0444 "$1" "$dst"
+        fi
+    fi
+}
+
+for file in *.[Mm][Dd] *.[Hh][Tt][Mm] *.[Hh][Tt][Mm][Ll] *.[Cc][Ss][Ss] \
+    [Aa][Uu][Tt][Hh][Oo][Rr][Ss] [Rr][Ee][Aa][Dd][Mm][Ee] [Ll][Ii][Cc][Ee][Nn][Ss][Ee] [Tt][Oo][Dd][Oo] \
+    [Cc][Hh][Aa][Nn][Gg][Ee][Ss] [Cc][Oo][Pp][Yy][Ii][Nn][Gg] [Cc][Hh][Aa][Nn][Gg][Ee][Ll][Oo][Gg] \
+    [Vv][Ee][Rr][Ss][Ii][Oo][Nn] [Gg][Pp][Ll] [Ll][Gg][Pp][Ll] [Mm][Ii][Tt] ; do
+    if [ -f "$file" ] ; then
+        do_install "$file"
+    fi
+done
+
+for file in *.[Tt][Xx][Tt] ; do
+    case "$file" in
+        *[Cc][Mm][Aa][Kk][Ee]*) continue ;;
+    esac
+    do_install "$file"
+done
+
+for file in *.[Pp][Dd][Ff] ; do
+    case "$file" in
+        *.[0-9].[Pp][Dd][Ff])
+            continue ;; # man pages as pdf
+        *) do_install "$file" ;;
+    esac
+done
+
+for file in * ; do
+    ok=0
+    case "$file" in
+        _*) continue ;;
+        .*) continue ;;
+        \#*) continue ;;
+        *~) continue ;;
+        # skip well known source files and build artefacts
+        *.[Aa][Ww][Kk]) continue ;;
+        *.[Bb][Aa][Tt]) continue ;;
+        *.[Cc][Nn][Ff]) continue ;;
+        *.[Cc][Oo][Mm]) continue ;;
+        *.[Cc][Oo][Nn][Ff]) continue ;;
+        *.[Cc][Oo][Nn][Ff][Ii][Gg]) continue ;;
+        *.[Dd]) continue ;;
+        *.[Dd][Oo][Aa][Pp]) continue ;;
+        *.[Dd][Oo][Xx][Yy]) continue ;;
+        *.[Ll][Aa]) continue ;;
+        *.[Ll][Oo]) continue ;;
+        *.[Pp][Oo]) continue ;;
+        *.[Ss]) continue ;;
+        *.[Ss][Tt][Aa][Mm][Pp]) continue ;;
+        *.[Ss][Yy][Mm][Ss]) continue ;;
+        *.[0-9]) continue ;;
+        *.[Aa][Mm]) continue ;;
+        *.[Bb][Aa][Kk]) continue ;;
+        *.[Cc]) continue ;;
+        *.[Cc][Cc]) continue ;;
+        *.[Cc][Ff][Gg]) continue ;;
+        *.[Cc][Mm][Aa][Kk]*) continue ;;
+        *.[Cc][Nn][Ff]) continue ;;
+        *.[Cc][Oo][Nn][Ff]) continue ;;
+        *.[Cc][Pp][Pp]) continue ;;
+        *.[Dd][Ee][Ff]) continue ;;
+        *.[Dd][Ee][Pp]) continue ;;
+        *.[Dd][Ss][Pp]) continue ;;
+        *.[Dd][Ss][Ww]) continue ;;
+        *.[Dd][Tt][Dd]) continue ;;
+        *.[Hh]) continue ;;
+        *.[Hh][Pp][Pp]) continue ;;
+        *.[Ii][Nn]) continue ;;
+        *.[Ll][Ss][Mm]) continue ;;
+        *.[Mm]4) continue ;;
+        *.[Mm][Aa][Kk]) continue ;;
+        *.[Mm][Aa][Kk][Ee]) continue ;;
+        *.[Mm][Kk]) continue ;;
+        *.[Mm][Ll]) continue ;;
+        *.[Mm][Ll][Ii]) continue ;;
+        *.[Oo][Rr][Ii][Gg]) continue ;;
+        *.[Pp][Aa][Ss]) continue ;;
+        *.[Pp][Cc]) continue ;;
+        *.[Pp][Ll]) continue ;;
+        *.[Pp][Ss]) continue ;;
+        *.[Rr][Cc]) continue ;;
+        *.[Rr][Ee][Ff]) continue ;;
+        *.[Ss][Hh]) continue ;;
+        *.[Ss][Pp][Ee][Cc]) continue ;;
+        *.[Tt][Ee][Xx]) continue ;;
+        *.[Tt][Ee][Xx][Ii][Nn][Ff][Oo]) continue ;;
+        *.[Vv][Cc][Ww]) continue ;;
+        *.[Xx][Mm][Ll]) continue ;;
+        *.[Xx][Ss][Ll]) continue ;;
+        *-[Dd][Ee][Pp][Ss]) continue ;;
+        *-[Dd][Ee][Pp]) continue ;;
+        ABOUT-NLS) continue ;;
+        Doxyfile) continue ;;
+        META) continue ;;
+	[Oo][Pp][Aa][Mm] ) continue ;;
+        Jam*) continue ;;
+        [Bb][Oo][Oo][Tt][Ss][Tt][Rr][Aa][Pp]*) continue ;;
+        [Cc][Oo][Nn][Ff][Ii][Gg]*) continue ;;
+        [Dd][Ee][Pp]) continue ;;
+        [Dd][Ee][Pp][Cc][Oo]*) continue ;;
+        [Dd][Ee][Pp][Ee][Nn][Dd]*) continue ;;
+        [Ii][Nn][Ss][Tt][Aa][Ll][Ll]*) continue ;;
+        stamp-*) continue ;;
+        words[0-9]) continue ;;
+        *CMake*) continue ;;
+        *[Mm][Aa][Kk][Ee][Ff][Ii][Ll][Ee]*) continue ;;
+        *[Mm][Kk][Ff][Ii]*) continue;;
+        *libtool*) continue ;;
+        *mapfile*) continue ;;
+
+        # copy everything what looks like a license
+        *[Aa][Uu][Tt][Hh][Oo][Rr]*) ok=1 ;;
+        *[Cc][Hh][Aa][Nn][Gg]*) ok=1 ;;
+        *[Cc][Oo][Pp][Yy]*) ok=1 ;;
+        *[Ll][Ii][Cc][Ee]*) ok=1 ;;
+        *[Rr][Ee][Aa][Dd][Mm][Ee]*) ok=1 ;;
+        *[Dd][Ii][Ss][Cc][Ll][Aa][Ii][Mm]*) ok=1 ;;
+        *[Tt][Hh][Ii][Rr][Dd]-[Pp][Aa][Rr][Tt]*) ok=1 ;;
+        *[Gg][Pp][Ll]*) ok=1 ;;
+        *[Bb][Oo][Oo][Ss][Tt]*) ok=1 ;;
+        *[Ff][Aa][Qq]*) ok=1 ;;
+        *[Tt][Oo][Dd][Oo]*) ok=1 ;;
+        *[Hh][Aa][Cc][Kk][Ii][Nn][Gg]*) ok=1 ;;
+        *[Nn][Oo][Tt][Ee]*) ok=1 ;;
+        *[Rr][Ee][Ll][Ee][Aa][Ss][Ee]*) ok=1 ;;
+        *[Mm][Aa][Ii][Nn][Tt][Aa][Ii][Nn]*) ok=1 ;;
+        *[Nn][Ee][Ww][Ss]*) ok=1 ;;
+        *[Aa][Cc][Kk][Nn][Oo][Ww][Ll][Ee][Dd][Gg][Ee]*) ok=1 ;;
+        *[Pp][Rr][Oo][Bb][Ll][Ee][Mm]*) ok=1 ;;
+        *[Ff][Ee][Aa][Uu][Tt][Uu][Rr][Ee]*) ok=1 ;;
+        *[Hh][Ee][Ll][Pp]*) ok=1 ;;
+        *[Ii][Nn][Tt][Rr][Oo]*) ok=1 ;;
+        O[Mm]*) continue ;; # omake file
+                # enable me later
+        *.*) continue ;;
+        [A-Za-z]*) ok=1;;
+        *) continue ;;
+    esac
+    if [ $ok -eq 1 ] && [ -f "$file" ] ; then
+        LANGUAGE=C
+        LANG=C
+        LC_ALL=C
+        export LC_ALL LANG LANGUAGE
+        ftype="$(${FILE_CMD} -b "$file" | $TR '[:upper:]' '[:lower:]')"
+        case "$ftype" in
+            *sgml*) continue ;;
+            *xml*)continue ;;
+            *non-iso*) continue ;;
+            *libtool*) continue;;
+            *' script'*) continue;;
+            *'c source'*) continue;;
+            *'object file'*) continue ;;
+            *'library file'*) continue ;;
+            *'very long lines'*) continue ;;
+            *' text'*)
+                do_install "$file"
+        esac
+    fi
+done
+.endscript
+.endif
+
 
 PATCHREF=	${BUILD_DIR}/work-ref
 
@@ -1500,7 +2258,7 @@
 	     $SED -e 's/^file-//')"
 	if expr "x$f" '>' "x$p" >/dev/null; then p="$f"; fi
         # Increase p by 1
-	q="$(incr_patch "$p")"
+	q="$(incr_patch "$p" | tr -d '\r' )"
         # Save patch
 	$MKDIR "$patchdir"
 	if [ -s "$PATCHREF/diff" ]; then
@@ -1565,11 +2323,17 @@
 .PHONY: do-configure
 .if !target(do-configure)
 do-configure:
-.  if defined(HAS_CONFIGURE)
+.  if defined(HAS_CONFIGURE) && ${HAS_CONFIGURE} != "no"
 .    for DIR in ${CONFIGURE_DIRS}
+.    if ( defined(WINOASIS) && ${WINOASIS} == "yes" ) || ( defined(WINGMAKE) && ${WINGMAKE} == "yes" )
+	${_PKG_SILENT}${_PKG_DEBUG}${_ULIMIT_CMD}cd ${DIR:Q} && ${SETENV} \
+	    ${CONFIGURE_ENV} ${SANDBOX_CONFIGURE_CMD} \
+            ${CONFIGURE_SCRIPT}
+.    else
 	${_PKG_SILENT}${_PKG_DEBUG}${_ULIMIT_CMD}cd ${DIR:Q} && ${SETENV} \
 	    ${CONFIGURE_ENV} ${SANDBOX_CONFIGURE_CMD} \
             ${CONFIGURE_SCRIPT} ${CONFIGURE_ARGS}
+.    endif
 .    endfor
 .  endif
 .endif
@@ -1823,7 +2587,7 @@
 ${FLIST}:
 	${_PKG_SILENT}${_PKG_DEBUG}\
 	${MAKE} -C ${.CURDIR:Q} ${MAKEFLAGS} file-list-pkg > ${FLIST}
-
+	${_PKG_SILENT}${_PKG_DEBUG} dos2unix -q ${FLIST}
 
 .PHONY: file-list-pkg
 .if !target(file-list-pkg)
@@ -1903,6 +2667,11 @@
 	     echo "exists ($file)" ;;
 	 esac
        done
+       echo "--- TIMESTAMP ---"
+       rpdir="$(cygpath "$REGISTER_PREFIX")"
+       cat "$FLIST" | ( \
+	cd "$rpdir" && xargs stat -c "%n %Y" | \
+	  md5sum | awk '{print $1}' )
      } < $FLIST > $BUILD_VERSION_FILE
 .  endscript
 
@@ -1975,7 +2744,7 @@
 	    exit 1
 	  fi
 	fi
-	out_name=`${PKG_PTOOL} -in-installed ${PKGNAME} -out-binary ${PKGREPOSITORY} -print-out-name`
+	out_name=`${PKG_PTOOL} -in-installed ${PKGNAME} -out-binary ${PKGREPOSITORY} -print-out-name | tr -d '\r'`
 	if [ -n "$out_name" ]; then
 		base_out_name=`basename "$out_name"`
 		make_package_links "$base_out_name" || exit
@@ -2474,7 +3243,7 @@
 CP_REG_FILE=${LOCALBASE}/build/files_registered
 CP_ACT_FILE=${LOCALBASE}/build/files_actual  
 
-CHECKPOINT_DIRS = ${LOCALBASE_DIRS}
+CHECKPOINT_DIRS = ${LOCALBASE_DIRS} ${CHECKPOINT_DIRS_ADDITIONS}
 
 .PHONY: checkpoint
 checkpoint:
@@ -2497,7 +3266,7 @@
         find ${CHECKPOINT_DIRS} -type f -o -type l 2>/dev/null | \
             LC_ALL=C sort | uniq >${CP_ACT_FILE}
 	${_PKG_SILENT}${_PKG_DEBUG}                                    \
-	if ! cmp ${CP_REG_FILE} ${CP_ACT_FILE} >/dev/null 2>/dev/null; then \
+	if ! diff -b -B ${CP_REG_FILE} ${CP_ACT_FILE} >/dev/null 2>/dev/null; then \
             echo "### PLIST incorrect: ${PKGNAME}"; \
             echo "### Unregistered files:"; \
 	    if comm --version >/dev/null 2>/dev/null; then \
@@ -2610,7 +3379,7 @@
 	test -f Makefile
 	test -f DESCR
 	test -f distinfo
-	test -f PLIST -o -f PLIST.godi
+#       test -f PLIST -o -f PLIST.godi
 .script
 .expand
 	${_PKG_SILENT}${_PKG_DEBUG}
@@ -2659,7 +3428,7 @@
 .script
 .expand
 	${_PKG_SILENT}${_PKG_DEBUG}
-	${MKDIR} "${EXPORT_PROFILES}"
+	${MKDIR} -p "${EXPORT_PROFILES}"
 	${PKG_TOOLS_BIN}/godi_console rprofile \
 		-site "${EXPORT_PROFILES}" \
 		-put "${EXPORT_PROFILE_NAME}"
@@ -2674,7 +3443,7 @@
 	${_PKG_SILENT}${_PKG_DEBUG}
 	${MKDIR} "${EXPORT_PACKAGES}"
 	out_name=`${PKG_PTOOL} -in-installed ${PKGNAME} \
-		-out-binary ${EXPORT_PACKAGES:QQ} -print-out-name`
+		-out-binary ${EXPORT_PACKAGES:QQ} -print-out-name | tr -d '\r'`
 	if [ -n "$$out_name" ]; then
 		${PKG_PTOOL} -in-binary "$$out_name" -out-manifest \
 			>> ${EXPORT_PACKAGES:QQ}/PKGMANIFEST
