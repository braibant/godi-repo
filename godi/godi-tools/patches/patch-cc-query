--- console-src/godi-pkg/godi_query.ml.orig	2012-12-30 21:34:31.000000000 +0000
+++ console-src/godi-pkg/godi_query.ml	2013-01-09 20:23:39.750000000 +0000
@@ -37,7 +37,7 @@
 	  let b = Buffer.create 100 in
 	  exec_to_user_error
 	    ~pref_user_error:true
-	    (call_cmd ~stdout:(`Buffer b)) 
+	    (call_cmd ~stdout:(`Buffer b))
 	    (shell ". godi_confdir");
 	  strip_trailing_ws(Buffer.contents b)
   )
@@ -65,11 +65,11 @@
 
 let from_godi_conf varname =
   let godi_conf = Lazy.force lazy_godi_conf in
-  let ctx = 
+  let ctx =
     Godi_make.create_context
       ~make_cmd:"godi_make"
       [] in
-  Godi_make.fast_parse_eval 
+  Godi_make.fast_parse_eval
     ~pref_user_error:true
     ~sys_mk:false
     pcache
@@ -79,7 +79,7 @@
 	      Godi_make.loc_linenumber = 0 } in
   let v =
     try
-      Godi_make.expand_var 
+      Godi_make.expand_var
 	~pref_user_error:true
 	ctx
 	loc
@@ -142,7 +142,7 @@
       f
     else
       Filename.concat (Sys.getcwd()) f
-  ) 
+  )
   else (
     match Godi_boot.stage() with
       | `Stage0 ->
@@ -161,7 +161,7 @@
   let ctx = Godi_make.create_context ~env (* ~curdir:dir ~objdir:dir *)
     ~make_cmd:"godi_make"
     ~override:[ "PACKAGE_SCANNING", "yes" ]
-    [] 
+    []
     (* ?stderr:protocol *)
   in
   Godi_make.fast_parse_eval pcache file ctx;
@@ -194,11 +194,11 @@
   try from_bsd_prefs_mk "SHLIB_TYPE" with Not_found -> "NA" ;;
 
 let wget() =
-  try from_bsd_prefs_mk "WGET" 
+  try from_bsd_prefs_mk "WGET"
   with Not_found -> failwith "Cannot get WGET" ;;
 
 let wget_options() =
-  try from_bsd_prefs_mk "WGET_OPTIONS" 
+  try from_bsd_prefs_mk "WGET_OPTIONS"
   with Not_found -> ""  (* This is not an error *) ;;
 
 let profile_name() =
@@ -221,13 +221,13 @@
   with Not_found -> []
 
 
-let have_ocamlopt() = 
+let have_ocamlopt() =
   try from_ocaml_mk "GODI_HAVE_OCAMLOPT" = "yes" with Not_found -> false ;;
 
-let have_ocamloptp() = 
+let have_ocamloptp() =
   try from_ocaml_mk "GODI_HAVE_PROF" = "yes" with Not_found -> false ;;
 
-let have_ocamldll() = 
+let have_ocamldll() =
   try from_ocaml_mk "GODI_HAVE_DLL" = "yes" with Not_found -> false ;;
 
 
@@ -241,7 +241,7 @@
 	  user_error("System error: " ^ msg)
   else
     match default with
-      | None -> 
+      | None ->
 	  if pref_user_error then
 	    user_error("File not found: " ^ Godi_file.slashname filename)
 	  else
@@ -287,7 +287,7 @@
 ;;
 
 
-let query_makefile ?pref_user_error ?godi_conf:gcarg ?(makefile="Makefile") 
+let query_makefile ?pref_user_error ?godi_conf:gcarg ?(makefile="Makefile")
                    ?(uncached=false) con dir variables =
 
 (*
@@ -310,10 +310,10 @@
   let etc_dir = Lazy.force lazy_etc_dir in
 
   let env =
-    Array.concat [ Unix.environment(); 
+    Array.concat [ Unix.environment();
 		   [| "GODI_CONF=" ^  gc;
                       "GODI_CONFDIR=" ^ etc_dir
-                   |] 
+                   |]
 		 ] in
   (* Latter variables override previous instances ! *)
 
@@ -326,14 +326,14 @@
    * programs)
    *)
 
-  let ctx = Godi_make.create_context 
-              ~env 
+  let ctx = Godi_make.create_context
+              ~env
               ~curdir:(Godi_file.slashname dir)
               ~objdir:dir
 	      ~make_cmd:"godi_make"
 	      ~console:con
               ~override:[ "PACKAGE_SCANNING", "yes" ]
-	      [] 
+	      []
   in
   let pc =
     if uncached then
@@ -369,23 +369,23 @@
 module VIdMap = Map.Make(VId);;
 
 
-class source_package_impl ?pref_user_error con (dir:Godi_file.filename) 
+class source_package_impl ?pref_user_error con (dir:Godi_file.filename)
                           : source_package =
   let confopts = read_confopts dir in
   let values =
     query_makefile
       ?pref_user_error
       con
-      dir (["PKGNAME"; "COMMENT"; "MAINTAINER"; "DEPENDS"; "BUILD_DEPENDS"; 
+      dir (["PKGNAME"; "COMMENT"; "MAINTAINER"; "DEPENDS"; "BUILD_DEPENDS";
 	    "CONFLICTS"; "MESSAGE_SRC"; "SELF_UPDATE_PKG";
 	   ] @ confopts) in
 
   let (fullname,comment,maintainer,depends,build_depends,conflicts,
        message_src, self_upd_pkg, confopts_vals) =
     match values with
-	fullname :: comment :: maintainer :: depends :: build_depends :: 
+	fullname :: comment :: maintainer :: depends :: build_depends ::
 	  conflicts :: message_src :: self_upd_pkg :: confopts_vals ->
-	    (fullname, comment, maintainer, depends, build_depends, conflicts, 
+	    (fullname, comment, maintainer, depends, build_depends, conflicts,
 	     message_src, self_upd_pkg, confopts_vals)
       | _ ->
 	  assert false
@@ -419,11 +419,11 @@
   method comment = comment
   method godi_maintainer = maintainer
   method description =
-    read_text_file ?pref_user_error ~default:"" 
+    read_text_file ?pref_user_error ~default:""
       (Godi_file.addname dir "DESCR")
 
   method src_fingerprint =
-    read_optional_text_file ?pref_user_error 
+    read_optional_text_file ?pref_user_error
       (Godi_file.addname dir ".src_fingerprint")
 
   method dependencies = dependencies
@@ -431,7 +431,7 @@
   method conflicts = conflicts
   method var_id = var_id
 
-  method self_update_pkg = 
+  method self_update_pkg =
     if self_upd_pkg = "" then
       None
     else
@@ -455,11 +455,11 @@
   method source_directory = dir
 
   method build_message =
-    read_text_file ?pref_user_error ~default:"" 
+    read_text_file ?pref_user_error ~default:""
       (Godi_file.addname dir "BUILDMSG")
 
   method install_message =
-    read_text_file ?pref_user_error ~default:"" 
+    read_text_file ?pref_user_error ~default:""
       (Godi_file.addname dir message_src)
 
   method build_options =
@@ -551,14 +551,14 @@
     (List.map
        (fun dir ->
 	  try
-	    let src_pkg = new source_package_impl 
+	    let src_pkg = new source_package_impl
 			    ~pref_user_error:true con dir in
 	    [ `Source_pkg src_pkg ]
 	  with
 	      User_error msg ->
 		printmsg con
 		  (sprintf
-		     "Scan of directory %s: %s\n" 
+		     "Scan of directory %s: %s\n"
 		     (Godi_file.slashname dir) msg);
 		[]
        )
@@ -601,26 +601,26 @@
 
 let from_tgz tgz =
   let components = Hashtbl.create 10 in
-  ( try
-      let ar = Pax.read (`File tgz) `Gzip `Tar in
+  (try
+    let ar = Pax.read (`File tgz) `Xz `Tar in
       let cont = ref true in
       while !cont do
 	match Pax.read_element ar with
 	  | None -> cont := false
-	  | Some el -> 
+	  | Some el ->
 	      let m = Pax.get_metadata el in
 	      let name = m#name in
 	      if name <> "" && name.[0] = '+' then
-		Hashtbl.replace 
-		  components 
+		Hashtbl.replace
+		  components
 		  name
 		  (Pax.extract_element_to_memory el)
 	      else
-		cont := false
+          cont:=false
       done;
       Pax.close_in ar;
-    with _ -> ()
-  );
+  with
+  | e -> prerr_endline (Printexc.to_string e));
   ( object
       method filename = tgz
       method get name =
@@ -645,19 +645,19 @@
 
 let parse_CONTENTS_from_tgz ?(pref_user_error=false) ?no_files tgz_obj =
   (* This version is used by [binary_packege_impl] *)
-  let plist_str = 
+  let plist_str =
     match tgz_obj # get "+CONTENTS" with
 	Some s -> s
       | None ->
-	  user_error("This file is not a binary GODI package: " ^ 
+	  user_error("This file is not a binary GODI package: " ^
 		       Godi_file.slashname(tgz_obj # filename))
   in
   try
     parse_inst_plist_string ?no_files plist_str
   with
     | Plist_error(file, line) when pref_user_error ->
-	user_error("Bad line in `+CONTENTS' in `" ^ 
-		     Godi_file.slashname(tgz_obj#filename) ^ 
+	user_error("Bad line in `+CONTENTS' in `" ^
+		     Godi_file.slashname(tgz_obj#filename) ^
 		     "': " ^ line)
 ;;
 
@@ -683,8 +683,7 @@
 let get_installed_packages_fn = ref (fun _ -> assert false) ;;
   (* "forward" declaration *)
 
-
-class installed_package_impl ?pref_user_error (dir:Godi_file.filename) 
+class installed_package_impl ?pref_user_error (dir:Godi_file.filename)
       : installed_package =
   let mtime = Godi_file.file_mtime dir in
   let plist = parse_CONTENTS ?pref_user_error (* ~no_files:true *) dir in
@@ -702,21 +701,21 @@
   let build_dependencies = Godi_plist.extract_blddep plist in
   let conflicts = Godi_plist.extract_pkgcfl plist in
   let src_fingerprint = Godi_plist.extract_src_fingerprint plist in
-  let build_version_fingerprint = 
+  let build_version_fingerprint =
     Godi_plist.extract_build_version_fingerprint plist in
 
-  let comment = 
+  let comment =
     read_text_file ?pref_user_error (Godi_file.addname dir "+COMMENT") in
   let size =
-    try Int64.of_string 
-          (strip_trailing_ws 
+    try Int64.of_string
+          (strip_trailing_ws
 	     (read_text_file (Godi_file.addname dir "+SIZE_PKG")))
     with
 	Sys_error _ -> 0L
       | Failure _ ->   0L in
 
   let size_all =
-    try Int64.of_string 
+    try Int64.of_string
           (strip_trailing_ws
 	     (read_text_file (Godi_file.addname dir "+SIZE_ALL")))
     with
@@ -731,9 +730,9 @@
     List.map
       (fun b ->
 	 let p = Godi_file.addname dir b in
-	 if Godi_file.file_exists p then 
+	 if Godi_file.file_exists p then
 	   (Some p, Some (read_text_file ?pref_user_error p) )
-	 else 
+	 else
 	   (None, None)
       )
       [ "+REQUIRE"; "+INSTALL"; "+DEINSTALL" ] in
@@ -753,10 +752,10 @@
   method pkgrevision = pkgrevision
   method src_fingerprint = src_fingerprint
   method comment = comment
-  method description = 
+  method description =
     read_text_file ?pref_user_error (Godi_file.addname dir "+DESC")
-  method godi_maintainer = 
-    read_text_file ?pref_user_error ~default:"" 
+  method godi_maintainer =
+    read_text_file ?pref_user_error ~default:""
       (Godi_file.addname dir "+MAINTAINER")
 
   method db_directory = dir
@@ -772,27 +771,26 @@
   method deinstall_script = deinst_script
 
   method install_message =
-    try 
+    try
       let f = Godi_plist.extract_display plist in
       read_text_file ?pref_user_error ~default:"" (Godi_file.addname dir f)
     with Not_found -> ""
 
-  method build_info = 
-    read_text_file ?pref_user_error ~default:"" 
+  method build_info =
+    read_text_file ?pref_user_error ~default:""
       (Godi_file.addname dir "+BUILD_INFO")
-  method build_version = 
-    read_text_file ?pref_user_error ~default:"" 
+  method build_version =
+    read_text_file ?pref_user_error ~default:""
       (Godi_file.addname dir "+BUILD_VERSION")
 
   method build_version_fingerprint =
     match build_version_fingerprint with
       | Some fp -> fp
       | None ->
-	  (* compute it on the fly *)
-          let s =
-	    "MD5:" ^ Digest.to_hex(Digest.string self#build_version) in
-          s
-
+      (* compute it on the fly *)
+        let s =
+          "MD5:" ^ Digest.to_hex(Digest.string self#build_version) in
+        s
 
   method dependencies = dependencies
   method build_dependencies = build_dependencies
@@ -824,7 +822,7 @@
 	   filter (pkg_name ipkg)
 	)
 	all_installed in
-    Godi_file.write_file_lines 
+    Godi_file.write_file_lines
       ~mode:`Binary
       (Godi_file.addname dir "+REQUIRED_BY")
       (List.map (fun succ -> pkg_fullname succ) successors);
@@ -850,14 +848,14 @@
 
   let load_single_pkg dir =
     try
-      let inst_pkg = new installed_package_impl 
+      let inst_pkg = new installed_package_impl
 		       ~pref_user_error:true dir in
       [ `Installed_pkg inst_pkg ]
     with
 	User_error msg ->
 	  printmsg con
 	    (sprintf
-	       "Scan of directory %s: %s\n" 
+	       "Scan of directory %s: %s\n"
 	       (Godi_file.slashname dir) msg);
 	  []
   in
@@ -876,7 +874,7 @@
 	    if Godi_file.file_exists inst_pkg#db_directory then (
 	      let mtime = Godi_file.file_mtime inst_pkg#db_directory in
 	      if mtime <> inst_pkg#db_entry_last_modified then (
-		load_single_pkg inst_pkg#db_directory  
+		load_single_pkg inst_pkg#db_directory
                   (* Package was modified *)
 	      )
 	      else
@@ -897,14 +895,14 @@
      *)
     let set =
       List.fold_left
-	(fun acc pkg -> 
+	(fun acc pkg ->
 	   let dir = (installed_pkg pkg) # db_directory in
 	   StringMap.add (Godi_file.slashname dir) dir acc)
 	StringMap.empty
 	pl' in
     let new_dirs =
       List.filter
-	(fun dir -> 
+	(fun dir ->
 	   not (StringMap.mem (Godi_file.slashname dir) set)) inst_dirs in
     pl' @ (load new_dirs)
   in
@@ -957,9 +955,9 @@
 (* Binary packages                                                     *)
 (***********************************************************************)
 
-let local_binary_package ?pref_user_error (tgz:Godi_file.filename) 
+let local_binary_package ?pref_user_error (tgz:Godi_file.filename)
       : binary_package =
-  let tgz = 
+  let tgz =
     match Godi_file.getcwd() with
       | None ->
 	  user_error("Cannot determine path of working directory")
@@ -968,7 +966,7 @@
   let tgz_obj= from_tgz tgz in
   let tgz_plist =
     parse_CONTENTS_from_tgz ?pref_user_error (* ~no_files:true *) tgz_obj in
-  let plist = 
+  let plist =
     `Binpkg (Godi_file.basename tgz) ::
       (List.filter (function `Binpkg _ -> false | _ -> true) tgz_plist) in
   let fullname = query_package_name ?pref_user_error plist in
@@ -985,16 +983,16 @@
   let build_dependencies = Godi_plist.extract_blddep plist in
   let conflicts = Godi_plist.extract_pkgcfl plist in
   let src_fingerprint = Godi_plist.extract_src_fingerprint plist in
-  let build_version_fingerprint = 
+  let build_version_fingerprint =
     Godi_plist.extract_build_version_fingerprint plist in
   let descr_lz = lazy (
     match tgz_obj # get "+DESC" with
       | Some s -> s
-      | None -> user_error("This file is not a binary GODI package: " ^ 
+      | None -> user_error("This file is not a binary GODI package: " ^
 			     Godi_file.slashname tgz_obj#filename)
   ) in
 
-  let comment = 
+  let comment =
     match tgz_obj # get "+COMMENT" with
 	Some c -> c
       | None   -> "" in
@@ -1037,8 +1035,8 @@
 
   method inst_plist = plist
 
-  method install_message = 
-    try 
+  method install_message =
+    try
       let f = Godi_plist.extract_display plist in
       ( match tgz_obj # get f with
 	  | None -> ""
@@ -1048,7 +1046,7 @@
 
   method build_version =
     match tgz_obj # get "+BUILD_VERSION" with
-      | None -> "" 
+      | None -> ""
       | Some s -> s
 
   method build_version_fingerprint =
@@ -1056,11 +1054,13 @@
       | Some fp -> fp
       | None ->
 	  (* compute it on the fly *)
-	  "MD5:" ^ Digest.to_hex(Digest.string self#build_version)
+        "MD5:" ^ Digest.to_hex(Digest.string self#build_version)
+
+
 
   method build_info =
     match tgz_obj # get "+BUILD_INFO" with
-      | None -> "" 
+      | None -> ""
       | Some s -> s
 
   method requirements_script =
@@ -1099,7 +1099,7 @@
   let build_dependencies = Godi_plist.extract_blddep plist in
   let conflicts = Godi_plist.extract_pkgcfl plist in
   let src_fingerprint = Godi_plist.extract_src_fingerprint plist in
-  let build_version_fingerprint = 
+  let build_version_fingerprint =
     Godi_plist.extract_build_version_fingerprint plist in
   let (name, version, pkgrevision) = split_name_version fullname in
   let comment = Godi_plist.extract_comment plist in
@@ -1115,7 +1115,7 @@
   method description = descr
   method godi_maintainer = "(Info n/a for non-source packages)"
 
-  method binary_archive = 
+  method binary_archive =
     match !local_tgz with
       | None -> failwith "binary_archive: not locally available"
       | Some tgz -> tgz
@@ -1158,7 +1158,7 @@
   method variant (v:var_id) : 'self =
     failwith "class binary_package: No such variant"
 
-  method inst_plist = 
+  method inst_plist =
     List.filter
       (function
          | `Binpkg _ | `Comment _ | `Descr _ -> false
@@ -1166,7 +1166,7 @@
       )
       plist
 
-  method install_message = 
+  method install_message =
     match !local_pkg with
       | None -> failwith "install_message: package not locally available"
       | Some pkg -> pkg#install_message
@@ -1181,7 +1181,7 @@
       | Some fp -> fp
       | None ->
 	  (* compute it on the fly *)
-	  "MD5:" ^ Digest.to_hex(Digest.string self#build_version)
+        "MD5:" ^ Digest.to_hex(Digest.string self#build_version)
 
   method build_info =
     match !local_pkg with
@@ -1204,7 +1204,7 @@
       | Some pkg -> pkg#deinstall_script
 end
 ;;
-  
+
 
 let get_remote_binary_package inst_plist url =
   `Binary_pkg(remote_binary_package ~pref_user_error:true inst_plist url)
@@ -1247,7 +1247,7 @@
     (fun inst_plist ->
        let file = Godi_plist.extract_binpkg inst_plist in
        get_remote_binary_package
-         inst_plist 
+         inst_plist
          (url ^ "/" ^ file)   (* FIXME: incorrect (URL encoding) *)
     )
     pkgman_list
@@ -1260,7 +1260,7 @@
        (scan_binary_packages con)
        p
     )
-;;  
+;;
 
 
 let build_version_fingerprint pkg =
@@ -1294,9 +1294,9 @@
   let vd = version_deps pkg in
   let dg =
     Digest.string
-      (bvf ^ " " ^ 
+      (bvf ^ " " ^
          String.concat " "
-           (List.map 
+           (List.map
               (fun (n,fp) -> n ^ "/" ^ fp)
               vd)
       ) in
@@ -1308,7 +1308,7 @@
 
 let binary_file_base pkg =
   match pkg with
-    | `Binary_pkg _ 
+    | `Binary_pkg _
     | `Installed_pkg _
     | `Dispersed_pkg _ ->
         pkg_fullname pkg ^ "@BUILD_" ^ binary_version_digest pkg
@@ -1320,13 +1320,13 @@
 
 let matches_dep pkg (name,cond) =
   let p = any_pkg pkg in
-  p#name = name && 
+  p#name = name &&
   version_matches_condition p#version cond &&
   ( match cond with
       | Binary(_,fp) ->
           ( match pkg with
               | `Binary_pkg _ | `Installed_pkg _ | `Dispersed_pkg _ ->
-                  ( fp = build_version_fingerprint pkg || 
+                  ( fp = build_version_fingerprint pkg ||
                       fp = "BUILD_" ^ binary_version_digest pkg
                   )
               | _ -> false
