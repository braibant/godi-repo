diff -u -r ../ctypes-orig/Makefile ./Makefile
--- ../ctypes-orig/Makefile	2014-10-08 08:45:02.596400000 +0000
+++ ./Makefile	2014-10-08 08:59:47.693600000 +0000
@@ -65,7 +65,7 @@
 ctypes-foreign-base.dir = src/ctypes-foreign-base
 ctypes-foreign-base.subproject_deps = ctypes
 ctypes-foreign-base.extra_mls = libffi_abi.ml
-ctypes-foreign-base.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib)
+ctypes-foreign-base.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib) $(lib_process)
 ctypes-foreign-base.cmo_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-base.cmx_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 
@@ -78,7 +78,7 @@
 ctypes-foreign-threaded.threads = yes
 ctypes-foreign-threaded.dir = src/ctypes-foreign-threaded
 ctypes-foreign-threaded.subproject_deps = ctypes ctypes-foreign-base
-ctypes-foreign-threaded.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib)
+ctypes-foreign-threaded.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib) $(lib_process)
 ctypes-foreign-threaded.cmo_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-threaded.cmx_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-threaded.install_native_objects = no
@@ -92,7 +92,7 @@
 ctypes-foreign-unthreaded.threads = no
 ctypes-foreign-unthreaded.dir = src/ctypes-foreign-unthreaded
 ctypes-foreign-unthreaded.subproject_deps = ctypes ctypes-foreign-base
-ctypes-foreign-unthreaded.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib)
+ctypes-foreign-unthreaded.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib) $(lib_process)
 ctypes-foreign-unthreaded.cmo_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-unthreaded.cmx_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-unthreaded.install_native_objects = no
diff -u -r ../ctypes-orig/Makefile.rules ./Makefile.rules
--- ../ctypes-orig/Makefile.rules	2014-10-08 08:45:02.627600000 +0000
+++ ./Makefile.rules	2014-10-08 00:10:02.997200000 +0000
@@ -3,12 +3,14 @@
 .SECONDARY:
 
 ifneq (,$(filter mingw%,$(OSYSTEM)))
+lib_process=-lpsapi
 ifeq ($(DEBUG),false)
   CFLAGS=-std=gnu99 -Wall -O3 $(OCAML_FFI_INCOPTS)
 else
   CFLAGS=-std=gnu99 -Wall -g $(OCAML_FFI_INCOPTS)
 endif
 else
+lib_process=
 ifeq ($(DEBUG),false)
   CFLAGS=-fPIC -Wall -O3 $(OCAML_FFI_INCOPTS)
 else
diff -u -r ../ctypes-orig/Makefile.tests ./Makefile.tests
--- ../ctypes-orig/Makefile.tests	2014-10-08 08:45:02.643200000 +0000
+++ ./Makefile.tests	2014-10-08 08:59:47.022800000 +0000
@@ -677,7 +677,6 @@
 TESTS += test-unions-stubs test-unions-stub-generator test-unions-generated test-unions
 TESTS += test-custom_ops
 TESTS += test-arrays-stubs test-arrays-stub-generator test-arrays-generated test-arrays
-TESTS += test-errno
 TESTS += test-passable
 TESTS += test-alignment
 TESTS += test-views-stubs test-views-stub-generator test-views-generated test-views
@@ -690,13 +689,14 @@
 TESTS += test-bigarrays-stubs test-bigarrays-stub-generator test-bigarrays-generated test-bigarrays
 TESTS += test-coercions-stubs test-coercions-stub-generator test-coercions-generated test-coercions
 TESTS += test-passing-ocaml-values-stubs test-passing-ocaml-values-stub-generator test-passing-ocaml-values-generated test-passing-ocaml-values
+ifeq (,$(filter mingw%,$(OSYSTEM)))
 TESTS += test-threads-stubs test-threads
+TESTS += test-errno
+endif
 
 ifneq (,$(filter mingw%,$(OSYSTEM)))
 WINLDFLAGS=-Wl,--out-implib,libtest_functions.dll.a
 LDFLAGS+=-static-libgcc
-FLEXLINKFLAGS+= -L $(BUILDDIR)
-export FLEXLINKFLAGS
 else
 WINLDFLAGS=
 endif
diff -u -r ../ctypes-orig/src/ctypes-foreign-base/dl.ml ./src/ctypes-foreign-base/dl.ml
--- ../ctypes-orig/src/ctypes-foreign-base/dl.ml	2014-10-06 15:23:14.000000000 +0000
+++ ./src/ctypes-foreign-base/dl.ml	2014-10-07 22:03:29.775200000 +0000
@@ -44,6 +44,18 @@
 let crush_flags f : 'a list -> int = List.fold_left (fun i o -> i lor (f o)) 0
 
 let dlopen ?filename ~flags =
+  let filename =
+    if Sys.os_type <> "Win32" then
+      filename
+    else
+      match filename with
+        | None -> None
+        | (Some x) as wh ->
+          if Filename.check_suffix (String.lowercase x) ".so" then
+            Some(Filename.chop_extension x ^ ".dll")
+          else
+            wh
+  in
   match _dlopen ?filename ~flags:(crush_flags resolve_flag flags) with
     | Some library -> library
     | None         -> _report_dl_error ()
diff -u -r ../ctypes-orig/src/ctypes-foreign-base/dl_stubs.c ./src/ctypes-foreign-base/dl_stubs.c
--- ../ctypes-orig/src/ctypes-foreign-base/dl_stubs.c	2014-10-06 15:23:14.000000000 +0000
+++ ./src/ctypes-foreign-base/dl_stubs.c	2014-10-08 09:11:08.742800000 +0000
@@ -14,6 +14,10 @@
 
 #include <assert.h>
 #include <stdint.h>
+#if defined _WIN32  && !defined __CYGWIN__
+#include <windows.h>
+#include <psapi.h>
+#endif
 
 #define Val_none Val_int(0)
 #define Some_val(v) Field(v, 0)
@@ -79,6 +83,59 @@
   CAMLreturn (handle != NULL ? Val_some((value)handle) : Val_none);
 }
 
+#if defined _WIN32  && !defined __CYGWIN__
+/* dumb emulation of dlsym(RTLD_DEFAULT,... ), which is not provided by the wrapper library.
+   Currently, "default library search order" or similar details are not honoured.
+*/
+static void * find_first(const char * needle)
+{
+#define MAX_HMODULES 512
+  HMODULE hmodules[MAX_HMODULES];
+  HMODULE *r_modules = &hmodules[0];
+  HANDLE proc;
+  DWORD bytes_hmodules;
+  void * result = NULL;
+  unsigned int i;
+  void * to_free = NULL;
+
+  proc = OpenProcess( PROCESS_QUERY_INFORMATION | PROCESS_VM_READ,
+                      FALSE, GetCurrentProcessId() );
+  if (proc == NULL){
+    return NULL;
+  }
+  /* get a list with all modules */
+  if( EnumProcessModules(proc, r_modules, sizeof(hmodules), &bytes_hmodules))
+  {
+    if ( bytes_hmodules > sizeof(hmodules) ){
+      if ( (r_modules=malloc(bytes_hmodules)) == NULL ){
+        goto endp;
+      }
+      to_free=r_modules;
+      if( ! EnumProcessModules(proc,
+                               r_modules,
+                               bytes_hmodules,
+                               &bytes_hmodules)){
+        goto endp;
+      }
+    }
+    for ( i = 0; i < (bytes_hmodules / sizeof(HMODULE)); i++ )
+    {
+      result=dlsym(r_modules[i],needle);
+      if ( result != NULL ){
+        break;
+      }
+    }
+  }
+endp:
+  CloseHandle(proc);
+  if ( to_free != NULL ){
+    free(to_free);
+  }
+  return result;
+#undef MAX_HMODULES
+}
+#endif
+
 /* ctypes_dlsym : ?handle:library -> symbol:string -> cvalue option */
 value ctypes_dlsym(value handle_option, value symbol)
 {
@@ -89,7 +146,17 @@
     : (void *)Some_val(handle_option);
 
   char *s = String_val(symbol);
-  void *result = dlsym(handle, s);
+  void *result;
+#if defined _WIN32  && !defined __CYGWIN__
+  if ( handle == RTLD_DEFAULT)
+  {
+      result=find_first(s);
+  }
+  else
+#endif
+  {
+      result=dlsym(handle, s);
+  }
   CAMLreturn(result == NULL
              ? Val_none
              : Val_some(caml_copy_nativeint((intptr_t)result)));
diff -u -r ../ctypes-orig/tests/test-passing-ocaml-values/stubs/functions.ml ./tests/test-passing-ocaml-values/stubs/functions.ml
--- ../ctypes-orig/tests/test-passing-ocaml-values/stubs/functions.ml	2014-10-06 15:23:14.000000000 +0000
+++ ./tests/test-passing-ocaml-values/stubs/functions.ml	2014-10-08 09:09:39.994400000 +0000
@@ -9,6 +9,11 @@
 
 open Ctypes
 
+let name_strdup =
+  match Sys.os_type with
+    | "Win32" -> "_strdup"
+    | _ -> "strdup"
+
 module Stubs (F: Cstubs.FOREIGN) =
 struct
   open F
@@ -22,6 +27,6 @@
   let memcpy_string_ptr = foreign "memcpy"
     (ocaml_string @-> ptr void @-> size_t @-> returning (ptr void))
 
-  let strdup = foreign "strdup"
+  let strdup = foreign name_strdup
     (ocaml_string @-> returning string)
 end
diff -u -r ../ctypes-orig/tests/test-passing-ocaml-values/test_passing_ocaml_values.ml ./tests/test-passing-ocaml-values/test_passing_ocaml_values.ml
--- ../ctypes-orig/tests/test-passing-ocaml-values/test_passing_ocaml_values.ml	2014-10-06 15:23:14.000000000 +0000
+++ ./tests/test-passing-ocaml-values/test_passing_ocaml_values.ml	2014-10-07 23:27:37.872800000 +0000
@@ -84,9 +84,15 @@
 (*
   Test that OCaml values cannot be used as return types.
 *)
+let strdup =
+  if Sys.os_type = "Win32" then
+    "_strdup"
+  else
+    "strdup"
+
 let test_ocaml_types_rejected_as_return_types _ =
   assert_raises IncompleteType
-    (fun () -> Foreign.foreign "strdup" (string @-> returning ocaml_string))
+    (fun () -> Foreign.foreign strdup (string @-> returning ocaml_string))
 
 
 (*
