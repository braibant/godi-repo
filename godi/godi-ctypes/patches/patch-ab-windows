From c7f285485d9bc93f5292cdec405c16340495c8e1 Mon Sep 17 00:00:00 2001
From: arirux <fdopen@ml.ignorelist.com>
Date: Tue, 7 Oct 2014 20:38:39 +0200
Subject: [PATCH] first windows fixes

---
 META                                     |  1 +
 Makefile                                 | 28 +++++++---
 Makefile.rules                           | 18 +++++-
 Makefile.tests                           | 21 +++++--
 src/ctypes-foreign-base/ffi_call_stubs.c |  1 -
 src/ctypes/posix_types_stubs.c           | 90 ++++++++++++++++++++++++------
 src/ctypes/type_info_stubs.c             | 16 +++++-
 src/ctypes/unsigned_stubs.c              |  6 ++
 src/discover/discover.ml                 | 94 ++++++++++++++++++++++++++------
 src/libffi-abigen/libffi_abigen.ml       |  9 ++-
 tests/clib/test_functions.c              |  8 +++
 11 files changed, 242 insertions(+), 50 deletions(-)

diff --git a/META b/META
index 97864a8..d20e032 100644
--- META
+++ META
@@ -34,6 +34,7 @@ package "foreign" (
  description = "Dynamic linking of C functions"
  requires(-mt) = "ctypes.foreign.unthreaded"
  requires(mt) = "ctypes.foreign.threaded"
+ exists_if = "ctypes-foreign-base.cma"
 
  package "base" (
   version = "0.3"
diff --git a/Makefile b/Makefile
index 48af4c5..7574bd5 100644
--- Makefile
+++ Makefile
@@ -7,14 +7,27 @@ OCAMLFIND=ocamlfind
 OCAMLMKLIB=ocamlmklib
 VPATH=src examples
 BUILDDIR=_build
-PROJECTS=configure libffi-abigen configured ctypes cstubs ctypes-foreign-base ctypes-foreign-threaded ctypes-foreign-unthreaded ctypes-top
+PROJECTS_MIN= configure libffi-abigen configured ctypes cstubs
+PROJECTS?= $(PROJECTS_MIN) ctypes-foreign-base ctypes-foreign-threaded ctypes-foreign-unthreaded ctypes-top
 GENERATED=src/ctypes_config.h src/ctypes_config.ml setup.data src/ctypes/ctypes_primitives.ml
 OCAML_FFI_INCOPTS=$(libffi_opt)
 export CFLAGS DEBUG
 
+EXTDLL:=$(shell ocamlfind ocamlc -config | grep '^ext_dll: ' | awk '{print $$2}')
+OSYSTEM:=$(shell ocamlfind ocamlc -config | grep '^system: ' | awk '{print $$2}')
+
+ifneq ($(filter minimal,$(MAKECMDGOALS)),)
+MINIMAL_FLAG?=-minimal
+else
+MINIMAL_FLAG?=
+endif
+
 # public targets
 all: setup.data build
 
+minimal:
+	$(MAKE) all PROJECTS="$(PROJECTS_MIN)" MINIMAL_FLAG=-minimal
+
 build: $(PROJECTS)
 
 clean:
@@ -52,7 +65,7 @@ ctypes-foreign-base.threads = no
 ctypes-foreign-base.dir = src/ctypes-foreign-base
 ctypes-foreign-base.subproject_deps = ctypes
 ctypes-foreign-base.extra_mls = libffi_abi.ml
-ctypes-foreign-base.link_flags = $(as_needed_flags) $(libffi_lib)
+ctypes-foreign-base.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib)
 ctypes-foreign-base.cmo_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-base.cmx_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 
@@ -65,7 +78,7 @@ ctypes-foreign-threaded.install = yes
 ctypes-foreign-threaded.threads = yes
 ctypes-foreign-threaded.dir = src/ctypes-foreign-threaded
 ctypes-foreign-threaded.subproject_deps = ctypes ctypes-foreign-base
-ctypes-foreign-threaded.link_flags = $(as_needed_flags) $(libffi_lib)
+ctypes-foreign-threaded.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib)
 ctypes-foreign-threaded.cmo_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-threaded.cmx_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-threaded.install_native_objects = no
@@ -79,7 +92,7 @@ ctypes-foreign-unthreaded.install = yes
 ctypes-foreign-unthreaded.threads = no
 ctypes-foreign-unthreaded.dir = src/ctypes-foreign-unthreaded
 ctypes-foreign-unthreaded.subproject_deps = ctypes ctypes-foreign-base
-ctypes-foreign-unthreaded.link_flags = $(as_needed_flags) $(libffi_lib)
+ctypes-foreign-unthreaded.link_flags = $(as_needed_flags) $(libffi_lib) $(libdl_lib)
 ctypes-foreign-unthreaded.cmo_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-unthreaded.cmx_opts = $(OCAML_FFI_INCOPTS:%=-ccopt %)
 ctypes-foreign-unthreaded.install_native_objects = no
@@ -121,7 +134,7 @@ src/ctypes-foreign-base/libffi_abi.ml: $(BUILDDIR)/libffi-abigen.native
 	$< > $@
 
 setup.data: src/discover/discover.ml
-	ocaml $^ -ocamlc "$(OCAMLFIND) ocamlc"
+	ocaml $^ -ocamlc "$(OCAMLFIND) ocamlc" $(MINIMAL_FLAG)
 
 # dependencies
 depend: configure
@@ -143,12 +156,13 @@ install-%:
                    $(if $(filter yes,$($(PROJECT).install_native_objects)),$(NATIVE_OBJECTS)))
 
 install: META-install $(PROJECTS:%=install-%)
+install-minimal:
+	@$(MAKE) PROJECTS="$(PROJECTS_MIN)" install
 
 uninstall:
 	$(OCAMLFIND) remove ctypes
 
-.PHONY: depend distclean clean build configure all install $(PROJECTS)
+.PHONY: depend distclean clean build configure all install $(PROJECTS) minimal install-minimal
 
 include .depend Makefile.rules Makefile.examples Makefile.tests
 -include setup.data
-
diff --git a/Makefile.rules b/Makefile.rules
index 9a867e8..2b940fa 100644
--- Makefile.rules
+++ Makefile.rules
@@ -2,11 +2,23 @@
 
 .SECONDARY:
 
+ifneq (,$(filter mingw%,$(OSYSTEM)))
+ifeq ($(DEBUG),false)
+  CFLAGS=-std=gnu99 -Wall -O3 $(OCAML_FFI_INCOPTS)
+else
+  CFLAGS=-std=gnu99 -Wall -g $(OCAML_FFI_INCOPTS)
+endif
+else
 ifeq ($(DEBUG),false)
   CFLAGS=-fPIC -Wall -O3 $(OCAML_FFI_INCOPTS)
-  OCAMLFLAGS=
 else
   CFLAGS=-fPIC -Wall -g $(OCAML_FFI_INCOPTS)
+endif
+endif
+
+ifeq ($(DEBUG),false)
+  OCAMLFLAGS=
+else
   OCAMLFLAGS=-g
 endif
 
@@ -18,7 +30,7 @@ NATIVE_OBJECTS = $(ML_SOURCE:$($(PROJECT).dir)/%.ml=$(BUILDDIR)/$($(PROJECT).dir
 BYTE_OBJECTS = $(ML_SOURCE:$($(PROJECT).dir)/%.ml=$(BUILDDIR)/$($(PROJECT).dir)/%.cmo)
 C_OBJECTS = $(C_SOURCE:$($(PROJECT).dir)/%.c=$(BUILDDIR)/$($(PROJECT).dir)/%.o)
 
-STUB_LIB = $(if $(C_OBJECTS),$(BUILDDIR)/dll$(PROJECT)_stubs.so)
+STUB_LIB = $(if $(C_OBJECTS),$(BUILDDIR)/dll$(PROJECT)_stubs$(EXTDLL))
 
 CMO_OPTS = $($(PROJECT).cmo_opts)
 CMX_OPTS = $($(PROJECT).cmx_opts)
@@ -50,7 +62,7 @@ OCAMLFIND_PACKAGE_FLAGS=$(patsubst %,-package %,$($(PROJECT).deps)) \
 $(BUILDDIR)/%.cmxa: $$(NATIVE_OBJECTS)
 	$(OCAMLFIND) opt -a -linkall $(OCAMLFLAGS) $(THREAD_FLAG) $(OCAMLFIND_PACKAGE_FLAGS) $(CMXA_OPTS) -o $@ $(NATIVE_OBJECTS) $(OCAML_LINK_FLAGS)
 
-$(BUILDDIR)/dll%_stubs.so: $$(C_OBJECTS)
+$(BUILDDIR)/dll%_stubs$(EXTDLL): $$(C_OBJECTS)
 	$(OCAMLMKLIB) -o $(BUILDDIR)/$*_stubs $^ $(LINK_FLAGS)
 
 $(BUILDDIR)/%.cmxs : $$(NATIVE_OBJECTS)
diff --git a/Makefile.tests b/Makefile.tests
index 06e7848..569ed09 100644
--- Makefile.tests
+++ Makefile.tests
@@ -692,12 +692,25 @@ TESTS += test-coercions-stubs test-coercions-stub-generator test-coercions-gener
 TESTS += test-passing-ocaml-values-stubs test-passing-ocaml-values-stub-generator test-passing-ocaml-values-generated test-passing-ocaml-values
 TESTS += test-threads-stubs test-threads
 
-testlib: $(BUILDDIR)/clib/libtest_functions.so
-$(BUILDDIR)/clib/libtest_functions.so: $(BUILDDIR)/clib/test_functions.o
-	$(CC) -shared $(LDFLAGS) -o $@ $^
+ifneq (,$(filter mingw%,$(OSYSTEM)))
+WINLDFLAGS=-Wl,--out-implib,libtest_functions.dll.a
+LDFLAGS+=-static-libgcc
+FLEXLINKFLAGS+= -L $(BUILDDIR)
+export FLEXLINKFLAGS
+else
+WINLDFLAGS=
+endif
+
+testlib: $(BUILDDIR)/clib/libtest_functions$(EXTDLL)
+$(BUILDDIR)/clib/libtest_functions$(EXTDLL): $(BUILDDIR)/clib/test_functions.o
+	$(CC) -shared $(LDFLAGS) $(WINLDFLAGS) -o $@ $^
+ifneq (,$(filter mingw%,$(OSYSTEM)))
+	cp $@ libtest_functions.dll.a $(BUILDDIR)
+endif
+
 $(BUILDDIR)/clib/test_functions.o: tests/clib/test_functions.c
 	@mkdir -p $(@D)
-	$(CC) -c $(CFLAGS) -I `ocamlc -where` -o $@ $^
+	$(CC) -c $(CFLAGS) -I `ocamlc -where | sed 's|\r$$||'` -o $@ $^
 tests/clib/test_functions.c: tests/clib/test_functions.h
 
 .PHONY: test testlib $(TESTS) tests-common
diff --git a/src/ctypes-foreign-base/ffi_call_stubs.c b/src/ctypes-foreign-base/ffi_call_stubs.c
index 1891f62..5672d06 100644
--- src/ctypes-foreign-base/ffi_call_stubs.c
+++ src/ctypes-foreign-base/ffi_call_stubs.c
@@ -17,7 +17,6 @@
 #include <caml/fail.h>
 #include <caml/hash.h>
 #include <caml/unixsupport.h>
-#include <caml/unixsupport.h>
 #include <caml/threads.h>
 
 #include <ffi.h>
diff --git a/src/ctypes/posix_types_stubs.c b/src/ctypes/posix_types_stubs.c
index ad174a0..993a19b 100644
--- src/ctypes/posix_types_stubs.c
+++ src/ctypes/posix_types_stubs.c
@@ -12,7 +12,10 @@
 #include <sys/types.h>
 #include <unistd.h>
 #include <signal.h>
+#if !defined _WIN32 || defined __CYGWIN__
 #include <pthread.h>
+#endif
+#include <time.h>
 
 #include <stdint.h>
 
@@ -58,38 +61,67 @@ static enum arithmetic _underlying_type(size_t typeinfo)
   }
 }
 
-#define EXPOSE_TYPEINFO(TYPENAME)                            \
+#define EXPOSE_TYPEINFO_COMMON(TYPENAME,STYPENAME)           \
   value ctypes_typeof_ ## TYPENAME(value unit)               \
   {                                                          \
-    size_t typeinfo = ARITHMETIC_TYPEINFO(TYPENAME);         \
+    size_t typeinfo = ARITHMETIC_TYPEINFO(STYPENAME);        \
     enum arithmetic underlying = _underlying_type(typeinfo); \
     return Val_int(underlying);                              \
   }
 
-EXPOSE_TYPEINFO(blkcnt_t)
-EXPOSE_TYPEINFO(blksize_t)
+#define EXPOSE_TYPEINFO(TYPENAME) \
+    EXPOSE_TYPEINFO_COMMON(TYPENAME,TYPENAME)
+
+#if !defined _WIN32 || defined __CYGWIN__
+
+#define EXPOSE_TYPEINFO_NO_WIN EXPOSE_TYPEINFO
+#define EXPOSE_TYPEINFO_S EXPOSE_TYPEINFO
+
+#else
+
+#define EXPOSE_TYPEINFO_NO_WIN(TYPENAME)                     \
+  value ctypes_typeof_ ## TYPENAME(value unit)               \
+  {                                                          \
+    return Val_int(sizeof(int64_t));                         \
+  }
+#define EXPOSE_TYPEINFO_S(X)                    \
+    EXPOSE_TYPEINFO_COMMON(X,_## X )
+
+#endif
+
+
+EXPOSE_TYPEINFO_NO_WIN(blkcnt_t)
+EXPOSE_TYPEINFO_NO_WIN(blksize_t)
 EXPOSE_TYPEINFO(clock_t)
-EXPOSE_TYPEINFO(dev_t)
-EXPOSE_TYPEINFO(fsblkcnt_t)
-EXPOSE_TYPEINFO(fsfilcnt_t)
-EXPOSE_TYPEINFO(gid_t)
-EXPOSE_TYPEINFO(id_t)
-EXPOSE_TYPEINFO(ino_t)
-EXPOSE_TYPEINFO(mode_t)
-EXPOSE_TYPEINFO(nlink_t)
-EXPOSE_TYPEINFO(off_t)
-EXPOSE_TYPEINFO(pid_t)
+EXPOSE_TYPEINFO_S(dev_t)
+EXPOSE_TYPEINFO_NO_WIN(fsblkcnt_t)
+EXPOSE_TYPEINFO_NO_WIN(fsfilcnt_t)
+EXPOSE_TYPEINFO_NO_WIN(gid_t)
+EXPOSE_TYPEINFO_NO_WIN(id_t)
+EXPOSE_TYPEINFO_S(ino_t)
+EXPOSE_TYPEINFO_S(mode_t)
+EXPOSE_TYPEINFO_NO_WIN(nlink_t)
+EXPOSE_TYPEINFO_S(off_t)
+EXPOSE_TYPEINFO_S(pid_t)
 EXPOSE_TYPEINFO(ssize_t)
-EXPOSE_TYPEINFO(suseconds_t)
+EXPOSE_TYPEINFO_NO_WIN(suseconds_t)
 EXPOSE_TYPEINFO(time_t)
-EXPOSE_TYPEINFO(uid_t)
+EXPOSE_TYPEINFO_NO_WIN(uid_t)
 EXPOSE_TYPEINFO(useconds_t)
 
+#if !defined _WIN32 || defined __CYGWIN__
 #define EXPOSE_TYPESIZE(TYPENAME)              \
   value ctypes_sizeof_ ## TYPENAME(value unit) \
   {                                            \
     return Val_int(sizeof(TYPENAME));          \
   }
+#else
+#define EXPOSE_TYPESIZE(TYPENAME)              \
+  value ctypes_sizeof_ ## TYPENAME(value unit) \
+  {                                            \
+    return Val_int(sizeof(int64_t));           \
+  }
+#endif
 
 EXPOSE_TYPESIZE(key_t)
 EXPOSE_TYPESIZE(pthread_t)
@@ -102,8 +134,17 @@ EXPOSE_TYPESIZE(pthread_mutexattr_t)
 EXPOSE_TYPESIZE(pthread_once_t)
 EXPOSE_TYPESIZE(pthread_rwlock_t)
 EXPOSE_TYPESIZE(pthread_rwlockattr_t)
+
+#if !defined _WIN32 || defined __CYGWIN__
 EXPOSE_TYPESIZE(sigset_t)
+#else
+value ctypes_sizeof_sigset_t(value unit)
+{
+  return Val_int(sizeof(_sigset_t));
+}
+#endif
 
+#if !defined _WIN32 || defined __CYGWIN__
 #define EXPOSE_ALIGNMENT(TYPENAME)                  \
   value ctypes_alignmentof_ ## TYPENAME(value unit) \
   {                                                 \
@@ -111,6 +152,15 @@ EXPOSE_TYPESIZE(sigset_t)
     return Val_int(offsetof(struct s, t));          \
   }
 
+#else
+#define EXPOSE_ALIGNMENT(TYPENAME)                  \
+  value ctypes_alignmentof_ ## TYPENAME(value unit) \
+  {                                                 \
+    struct s { char c; int64_t t; };                \
+    return Val_int(offsetof(struct s, t));          \
+  }
+#endif
+
 EXPOSE_ALIGNMENT(key_t)
 EXPOSE_ALIGNMENT(pthread_t)
 EXPOSE_ALIGNMENT(pthread_attr_t)
@@ -122,4 +172,12 @@ EXPOSE_ALIGNMENT(pthread_mutexattr_t)
 EXPOSE_ALIGNMENT(pthread_once_t)
 EXPOSE_ALIGNMENT(pthread_rwlock_t)
 EXPOSE_ALIGNMENT(pthread_rwlockattr_t)
+#if !defined _WIN32 || defined __CYGWIN__
 EXPOSE_ALIGNMENT(sigset_t)
+#else
+value ctypes_alignmentof_sigset_t(value unit)
+{
+  struct s { char c; _sigset_t t; };
+  return Val_int(offsetof(struct s, t));
+}
+#endif
diff --git a/src/ctypes/type_info_stubs.c b/src/ctypes/type_info_stubs.c
index 602c425..102f9bd 100644
--- src/ctypes/type_info_stubs.c
+++ src/ctypes/type_info_stubs.c
@@ -5,6 +5,12 @@
  * See the file LICENSE for details.
  */
 
+#ifndef __USE_MINGW_ANSI_STDIO
+#if defined(__MINGW32__) || defined(__MINGW64__)
+#define __USE_MINGW_ANSI_STDIO 1
+#endif
+#endif
+
 #include <inttypes.h>
 #include <stdio.h>
 #include <assert.h>
@@ -20,6 +26,12 @@
 #include "raw_pointer.h"
 #include "primitives.h"
 
+#if defined(_WIN64) && defined(__USE_MINGW_ANSI_STDIO)
+#define REAL_ARCH_INTNAT_PRINTF_FORMAT "ll"
+#else
+#define REAL_ARCH_INTNAT_PRINTF_FORMAT ARCH_INTNAT_PRINTF_FORMAT
+#endif
+
 /* Read a C value from a block of memory */
 /* read : 'a prim -> fat_pointer -> 'a */
 value ctypes_read(value prim_, value buffer_)
@@ -131,9 +143,9 @@ value ctypes_string_of_prim(value prim_, value v)
   case Uint16_t: len = snprintf(buf, sizeof buf, "%" PRIu16, Uint16_val(v)); break;
   case Uint32_t: len = snprintf(buf, sizeof buf, "%" PRIu32, Uint32_val(v)); break;
   case Uint64_t: len = snprintf(buf, sizeof buf, "%" PRIu64, Uint64_val(v)); break;
-  case Camlint: len = snprintf(buf, sizeof buf, "%" ARCH_INTNAT_PRINTF_FORMAT "d",
+  case Camlint: len = snprintf(buf, sizeof buf, "%" REAL_ARCH_INTNAT_PRINTF_FORMAT "d",
                          (intnat)Int_val(v)); break;
-  case Nativeint: len = snprintf(buf, sizeof buf, "%" ARCH_INTNAT_PRINTF_FORMAT "d",
+  case Nativeint: len = snprintf(buf, sizeof buf, "%" REAL_ARCH_INTNAT_PRINTF_FORMAT "d",
                            (intnat)Nativeint_val(v)); break;
   case Float: len = snprintf(buf, sizeof buf, "%.12g", Double_val(v)); break;
   case Double: len = snprintf(buf, sizeof buf, "%.12g", Double_val(v)); break;
diff --git a/src/ctypes/unsigned_stubs.c b/src/ctypes/unsigned_stubs.c
index b4d1671..9252fa9 100644
--- src/ctypes/unsigned_stubs.c
+++ src/ctypes/unsigned_stubs.c
@@ -5,6 +5,12 @@
  * See the file LICENSE for details.
  */
 
+#ifndef __USE_MINGW_ANSI_STDIO
+#if defined(__MINGW32__) || defined(__MINGW64__)
+#define __USE_MINGW_ANSI_STDIO 1
+#endif
+#endif
+
 #include <caml/mlvalues.h>
 #include <caml/custom.h>
 #include <caml/alloc.h>
diff --git a/src/discover/discover.ml b/src/discover/discover.ml
index c6b5464..98d73a2 100644
--- src/discover/discover.ml
+++ src/discover/discover.ml
@@ -49,7 +49,9 @@ let default_search_paths =
     "/mingw";
   ]
 
-let path_sep = if Sys.os_type = "Win32" then ';' else ':'
+let is_win = Sys.os_type = "Win32"
+
+let path_sep = if is_win then ';' else ':'
 
 let split_path str =
   let len = String.length str in
@@ -95,6 +97,16 @@ CAMLprim value ffi_test()
 }
 "
 
+let libdl_code = "
+#include <caml/mlvalues.h>
+#include <dlfcn.h>
+CAMLprim value ffi_test()
+{
+  dlopen(NULL,0);
+  return Val_unit;
+}"
+
+
 (* +-----------------------------------------------------------------+
    | Compilation                                                     |
    +-----------------------------------------------------------------+ *)
@@ -295,15 +307,40 @@ let arg_bool r =
                 | "true" -> r := true
                 | "false" -> r := false
                 | _ -> assert false)
+
+  (* Our setup.data keys. *)
+let setup_data_keys =
+  [
+    "libdl_opt";
+    "libdl_lib";
+    "libffi_opt";
+    "libffi_lib";
+    "as_needed_flags"
+  ]
+
 let () =
+  let minimal_install = ref false in
   let args = [
     "-ocamlc", Arg.Set_string ocamlc, "<path> ocamlc";
     "-ext-obj", Arg.Set_string ext_obj, "<ext> C object files extension";
     "-exec-name", Arg.Set_string exec_name, "<name> name of the executable produced by ocamlc";
     "-ccomp-type", Arg.Set_string ccomp_type, "<ccomp-type> C compiler type";
-  ] in
+    "-minimal", Arg.Set minimal_install, "no foreign interface"
+  ]
+  in
   Arg.parse args ignore "check for external C libraries and available features\noptions are:";
 
+  if !minimal_install then (
+    let oc = open_out "setup.data" in
+    List.iter
+      (fun str -> output_string oc str; output_string oc "=\n")
+      setup_data_keys;
+    close_out oc;
+    close_out config;
+    close_out config_ml;
+    exit 0;
+  );
+
   (* Put the caml code into a temporary file. *)
   let file, oc = Filename.open_temp_file "ffi_caml" ".ml" in
   caml_file := file;
@@ -385,7 +422,7 @@ let () =
     if not have_pkg_config then
       printf "Warning: the 'pkg-config' command is not available.";
     printf "
-The following recquired C libraries are missing: %s.
+The following required C libraries are missing: %s.
 Please install them and retry. If they are installed in a non-standard location
 or need special flags, set the environment variables <LIB>_CFLAGS and <LIB>_LIBS
 accordingly and retry.
@@ -401,9 +438,12 @@ export LIBFFI_LIBS=-L/opt/local/lib
 
   fprintf config "#endif\n";
 
-  test_feature "no_as_needed" ""
-    (fun () ->
-      ksprintf Sys.command "
+  (match is_win with
+   | true -> setup_data := ("as_needed_flags", []) :: !setup_data;
+   | false ->
+     test_feature "no_as_needed" ""
+       (fun () ->
+         ksprintf Sys.command "
          touch as_needed_test.ml;
          ocamlopt -shared -cclib -Wl,--no-as-needed as_needed_test.ml -o as_needed_test.cmxs > %s 2>&1;
          EXIT=$?;
@@ -411,18 +451,40 @@ export LIBFFI_LIBS=-L/opt/local/lib
          exit $EXIT"
         !log_file = 0);
 
-  if !not_available = [] then
-    setup_data := ("as_needed_flags", ["-Wl,--no-as-needed"]) :: !setup_data
-  else
-    setup_data := ("as_needed_flags", []) :: !setup_data;
+     if !not_available = [] then
+       setup_data := ("as_needed_flags", ["-Wl,--no-as-needed"]) :: !setup_data
+     else
+       setup_data := ("as_needed_flags", []) :: !setup_data;
+  );
   not_available := [];
 
-  (* Our setup.data keys. *)
-  let setup_data_keys = [
-    "libffi_opt";
-    "libffi_lib";
-    "as_needed_flags";
-  ] in
+  (match is_win with
+  | false ->  setup_data := ("libdl_opt", []) :: ("libdl_lib", []) :: !setup_data;
+  | true ->
+    let test_libdl () =
+      let opt, lib =
+        lib_flags "LIBDL"
+          (fun () -> ([], ["-ldl"]))
+      in
+      setup_data := ("libdl_opt", opt) :: ("libdl_lib", lib) :: !setup_data;
+      test_code (opt, lib) libdl_code
+    in
+    test_feature "libdl" "" test_libdl;
+
+    if !not_available <> [] then begin
+      print_endline "
+The following required C libraries are missing: libdl (dlfcn-win32).
+Please install them and retry. If they are installed in a non-standard location
+or need special flags, set the environment variables <LIB>_CFLAGS and <LIB>_LIBS
+accordingly and retry.
+
+For example, if libdl is installed in /opt/local, you can type:
+
+export LIBDL_CFLAGS=-I/opt/local/include
+export LIBDL_LIBS=-L/opt/local/lib -ldl";
+      exit 1;
+    end
+  );
 
   (* Load setup.data *)
   let setup_data_lines =
diff --git a/src/libffi-abigen/libffi_abigen.ml b/src/libffi-abigen/libffi_abigen.ml
index d69c70e..adeb9c2 100644
--- src/libffi-abigen/libffi_abigen.ml
+++ src/libffi-abigen/libffi_abigen.ml
@@ -57,13 +57,20 @@ let getenv ~default name =
   try Sys.getenv name
   with Not_found -> default
 
+let null_device =
+  if Sys.os_type = "Win32" then
+    "nul"
+  else
+    "/dev/null"
+
 let read_output_int input_filename output_filename =
   let cmd = 
-    Printf.sprintf "%s -o %s %s %s 2>/dev/null && %s"
+    Printf.sprintf "%s -o %s %s %s 2>%s && %s"
       (getenv ~default:"cc" "CC")
       output_filename
       (getenv ~default:"" "CFLAGS")
       input_filename
+      null_device
       output_filename
   in
   let inch = Unix.open_process_in cmd in
diff --git a/tests/clib/test_functions.c b/tests/clib/test_functions.c
index d497314..fde45ac 100644
--- tests/clib/test_functions.c
+++ tests/clib/test_functions.c
@@ -518,23 +518,31 @@ void call_registered_callback(int times, int starting_value)
   }
 }
 
+#if !defined _WIN32 || defined __CYGWIN__
 static sem_t semaphore1;
 static sem_t semaphore2;
+#endif
 
 void initialize_waiters(void)
 {
+#if !defined _WIN32 || defined __CYGWIN__
   sem_init(&semaphore1, 0, -1);
   sem_init(&semaphore2, 0, -1);
+#endif
 }
 
 void post1_wait2(void)
 {
+#if !defined _WIN32 || defined __CYGWIN__
   sem_post(&semaphore1);
   sem_wait(&semaphore2);
+#endif
 }
 
 void post2_wait1(void)
 {
+#if !defined _WIN32 || defined __CYGWIN__
   sem_post(&semaphore2);
   sem_wait(&semaphore1);
+#endif
 }
-- 
1.9.1

