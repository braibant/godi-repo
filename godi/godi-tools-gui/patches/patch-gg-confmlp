--- console-src/godi-util/godi_conf.mlp.orig	2012-12-30 21:34:30.000000000 +0000
+++ console-src/godi-util/godi_conf.mlp	2013-02-10 11:57:04.046875000 +0000
@@ -24,3 +24,60 @@
 
 let cmd_bzip2 = "@CMD_BZIP2@";;
   (* The bzip2 utility *)
+
+module Helpf = struct
+  let is_windows = Sys.os_type = "Win32" ;;
+
+  let add_exe str = match is_windows with
+  | false -> str
+  | true  -> str ^ ".exe" ;;
+
+  (* for bsdtar and bsdcpio.
+     During self update we us the copy in the stage dir,
+     This way, it's possible to overwrite the old ones *)
+  let localbase = "@LOCALBASE@" ;;
+
+
+  (* try relocatable location *)
+  let sbindir,localbase =
+    let dummy_curdir = localbase ^ "/sbin" in
+    try
+      let curdir = Filename.dirname Sys.executable_name in
+      let self_dir = Filename.dirname curdir in
+      if self_dir = "" || not (Sys.file_exists Sys.executable_name) || not (Sys.is_directory self_dir) then
+        dummy_curdir,localbase
+      else (
+        if is_windows = true && self_dir.[0] = '\\' then (
+          (* enforce forward slashes *)
+          for i = 0 to String.length self_dir - 1 do
+            match self_dir.[i] with
+            | '\\' -> self_dir.[i] <- '/';
+            | _ -> ()
+          done;
+        );
+        curdir,self_dir
+      )
+    with
+    | Sys_error _  -> dummy_curdir,localbase
+(*
+  (* temporary solution for self update *)
+  let localbase =
+    try
+      if Sys.getenv "GODI_TOOL_SELF_UPDATE" = "1" then
+        localbase ^ "/build/godi/godi-tools/work/stage"
+      else
+        localbase
+    with
+    | Not_found -> localbase
+ *)
+end
+
+open Helpf
+
+let cmd_xz = add_exe "/bin/xz" ;;
+let cmd_tar = add_exe "/bin/tar" ;;
+let cmd_cpio = add_exe "/bin/cpio" ;;
+let cmd_bsdtar = add_exe (sbindir ^ "/bsdtar") ;;
+let cmd_bsdcpio = add_exe (sbindir ^ "/bsdcpio") ;;
+let cmd_shell = add_exe "/bin/bash" ;;
+let cmd_rm = add_exe "/bin/rm" ;;
