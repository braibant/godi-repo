diff -ru5 orig/Makefile work/Makefile
--- Makefile	2007-05-21 16:48:00 +0000
+++  Makefile	2009-02-19 14:23:53 +0000
@@ -16,18 +16,18 @@
 	@echo " - 'make install',"
 	@echo "       to bootstrap, build, and install everything"
 	@exit 1
 
 bootstrap: boot/Makefile
-	@cd boot; $(MAKE) Makefile.dep; $(MAKE) omake
-	@ln -sf boot/omake omake-boot
+	@cd boot; $(MAKE) Makefile.dep; $(MAKE) omake.exe
+	@ln -sf boot/omake.exe omake-boot.exe
 
 boot/Makefile: src/Makefile
 	mkdir -p boot
 	@touch boot/Makefile.dep
 	@sleep 1
-	ln -sf ../src/Makefile boot/Makefile
+	(cd boot && ln -sf ../src/Makefile ./Makefile)
 
 all: bootstrap
 	touch .config
 	OMAKEFLAGS= OMAKEPATH=lib ./omake-boot --dotomake .omake --force-dotomake -j2 main
 	OMAKEFLAGS= OMAKEPATH=lib src/main/omake --dotomake .omake --force-dotomake -j2 all
diff -ru5 OMakefile OMakefile
--- OMakefile	2007-06-22 19:03:37 +0000
+++ OMakefile	2009-02-19 14:23:53 +0000
@@ -31,16 +31,16 @@
 
 else
     #
     # Extra options for the C compiler
     #
-    CFLAGS += -g -O2 -Wall -Werror -Wno-unused
+    CFLAGS += -g -O2 -Wall -Werror -Wno-unused -Wno-strict-aliasing
 
     #
-    # We never need threads on Unix
+    # We need threads on MinGW
     #
-    THREADS_ENABLED = false
+    THREADS_ENABLED = true
 
     export
 
 #
 # General options
diff -ru5 src/Makefile src/Makefile
--- src/Makefile	2007-06-27 23:59:16 +0000
+++ src/Makefile	2009-02-19 14:23:54 +0000
@@ -10,26 +10,26 @@
 LN = ln -sf
 RM = rm -f
 DOT = ./
 slash = /
 
-win32 = unix
-system = null
+win32 = win32
+system = system
 
 #
 # C configuration
 #
-CC = cc
-CFLAGS =
+CC = gcc
+CFLAGS = -DWIN32 -DFAM_ENABLED -DFAM_PSEUDO -Wno-strict-aliasing
 AR = ar cq
 AROUT =
 EXT_OBJ = .o
 EXT_LIB = .a
-EXE =
+EXE = .exe
 
-OCAMLFLAGS =
-THREADSLIB =
+OCAMLFLAGS = -thread
+THREADSLIB = threads.cma
 
 .SUFFIXES: .mll .mly .mli .ml .c .cmi .cmo .cma .o
 
 .c.o:
 	$(CC) $(CFLAGS) -I"`ocamlc -where`" -c $*.c
@@ -357,12 +357,12 @@
 util.cma: $(CMOFILES_util)
 	$(OCAMLC) $(OCAMLFLAGS) $(OCAML_LIB_FLAGS_util) -a -o $@ $(CMOFILES_util)
 
 ocaml_patch.cmo: ocaml_patch.cmi
 
-ocaml_patch.ml: ..$(slash)src$(slash)util$(slash)ocaml_patch_$(win32).ml
-	$(LN) ..$(slash)src$(slash)util$(slash)ocaml_patch_$(win32).ml ocaml_patch.ml
+ocaml_patch.ml: ..$(slash)src$(slash)util$(slash)ocaml_patch_win32.ml
+	$(LN) ..$(slash)src$(slash)util$(slash)ocaml_patch_win32.ml ocaml_patch.ml
 
 Makefile.dep: ocaml_patch.ml
 
 SRC_util = ..$(slash)src$(slash)util
 
@@ -727,12 +727,12 @@
 omake_shell_parse.cmo: omake_shell_parse.cmi
 
 omake_shell_parse.mly: ..$(slash)src$(slash)shell$(slash)omake_shell_parse.mly
 	$(LN) ..$(slash)src$(slash)shell$(slash)omake_shell_parse.mly omake_shell_parse.mly
 
-omake_shell_sys.ml: ..$(slash)src$(slash)shell$(slash)omake_shell_sys_$(win32).ml
-	$(LN) ..$(slash)src$(slash)shell$(slash)omake_shell_sys_$(win32).ml omake_shell_sys.ml
+omake_shell_sys.ml: ..$(slash)src$(slash)shell$(slash)omake_shell_sys_win32.ml
+	$(LN) ..$(slash)src$(slash)shell$(slash)omake_shell_sys_win32.ml omake_shell_sys.ml
 
 Makefile.dep: omake_shell_parse.mli omake_shell_parse.ml omake_shell_sys.ml
 
 SRC_shell = ..$(slash)src$(slash)shell
 
diff -ru5 src/clib/omake_shell_sys.c src/clib/omake_shell_sys.c
--- src/clib/omake_shell_sys.c	2007-06-27 19:33:40 +0000
+++ src/clib/omake_shell_sys.c	2009-02-19 14:23:54 +0000
@@ -36,13 +36,10 @@
 #include <caml/custom.h>
 
 #ifdef WIN32
 #include <caml/signals.h>
 
-/* Disable some of the warnings */
-#pragma warning( disable : 4127 4189 4702 4706 4996 )
-
 #ifndef _WIN32_WINNT
 #define _WIN32_WINNT 0x0400
 #endif
 
 #include <windows.h>
@@ -181,11 +178,11 @@
 {
     int c, escaped, extra;
 
     extra = 0;
     escaped = 0;
-    while(c = *strp++) {
+    while( (c = *strp++) ) {
         switch(c) {
         case '"':
             escaped++;
             extra++;
             break;
@@ -214,11 +211,11 @@
 static void string_copy_escaped(char *dstp, const char *srcp)
 {
     char c;
 
     *dstp++ = '"';
-    while(c = *srcp) {
+    while( (c = *srcp) ) {
         if(c == '"')
             *dstp++ = '\\';
         *dstp++ = c;
         srcp++;
     }
@@ -469,11 +466,10 @@
 /*
  * The process has changed.
  * Fixup the process list, and
  * return a wait code.
  */
-#pragma warning( disable : 4100 )
 static value handle_wait(const char *debug, Process **processpp)
 {
     CAMLparam0();
     CAMLlocal2(tuple, status);
     Process *processp;
@@ -791,11 +787,11 @@
     timeout = Int_val(v_nohang) ? 0 : INFINITE;
 
     /* Collect the processes and their handles */
     ncount = 1;
     handles[0] = state->changed;
-    for(processpp = &state->processes; processp = *processpp; processpp = &(*processpp)->next) {
+    for(processpp = &state->processes; (processp = *processpp) ; processpp = &(*processpp)->next) {
         if((pgrp && processp->pgrp != pgrp)
            || (pgrp == 0 && processp->pgrp == INIT_PID)
            || (leader && processp->pid != processp->pgrp)
            || (leader == 0 && processp->pid == processp->pgrp)) {
             continue;
@@ -826,11 +822,11 @@
             code = GetLastError();
         leave_blocking_section();
 
         /* See if something has changed */
         if(index == WAIT_OBJECT_0) {
-            for(processpp = &state->processes; processp = *processpp; processpp = &(*processpp)->next) {
+            for(processpp = &state->processes; (processp = *processpp) ; processpp = &(*processpp)->next) {
                 if(processp->pgrp == pgrp && processp->changed)
                     CAMLreturn(handle_wait("state changed", processpp));
             }
         }
         else
@@ -845,11 +841,11 @@
     else
         raise_not_found();
 
     /* Adjust process */
     pid = processes[index];
-    for(processpp = &state->processes; processp = *processpp; processpp = &(*processpp)->next) {
+    for(processpp = &state->processes; (processp = *processpp) ; processpp = &(*processpp)->next) {
         if(processp->pid == pid)
             break;
     }
 
     /* If the process is not found, some other thread waited for it */
@@ -1105,11 +1101,11 @@
         terminate_processes();
         /* Now we exit too */
         ExitProcess(1);
         break;
     default:
-        fprintf(stderr, "console_ctrl_handler: unknown code: %d\n", code);
+        fprintf(stderr, "console_ctrl_handler: unknown code: %d\n", (int)code);
         fflush(stderr);
         rval = FALSE;
         break;
     }
 #ifdef OSH_DEBUG
diff -ru5 src/clib/readline.c src/clib/readline.c
--- src/clib/readline.c	2007-05-15 19:03:03 +0000
+++ src/clib/readline.c	2009-02-19 14:23:54 +0000
@@ -34,10 +34,12 @@
 #include <caml/memory.h>
 #include <caml/fail.h>
 #include <caml/custom.h>
 #include <caml/callback.h>
 
+#include <ctype.h>
+
 /*
  * XXX: HACK (nogin 02/28/07):
  * CAMLreturn with non-value types is wrong in 3.09.3 and later; CAMLreturnT was added in 3.09.4 and
  * 3.10 to address this, but in 3.09.3 we are out of luck!
  */
@@ -50,12 +52,10 @@
 #endif
 
 #ifdef WIN32
 #  include <caml/signals.h>
 #  include <windows.h>
-   /* Disable some of the warnings */
-#  pragma warning( disable : 4100 4127 4505 4702 4996 4189)
 #else
 #  include <unistd.h>
 #  include <string.h>
 #  include <sys/types.h>
 #  include <limits.h>
diff -ru5 src/libmojave-external/cutil/fam_inotify.c src/libmojave-external/cutil/fam_inotify.c
--- src/libmojave-external/cutil/fam_inotify.c	2006-12-01 21:13:14 +0000
+++ src/libmojave-external/cutil/fam_inotify.c	2009-02-19 14:23:54 +0000
@@ -415,11 +415,9 @@
     return -1;
 }
 #else /* FAM_INOTIFY */
 
 #if defined(WIN32) || defined(_WIN32)
-/* Disable the "translation unit is empty" warning */
-#pragma warning( disable : 4206 )
 #endif
 
 #endif /* FAM_INOTIFY */
 
diff -ru5 src/libmojave-external/cutil/fam_kqueue.c src/libmojave-external/cutil/fam_kqueue.c
--- src/libmojave-external/cutil/fam_kqueue.c	2007-04-09 20:44:49 +0000
+++ src/libmojave-external/cutil/fam_kqueue.c	2009-02-19 14:23:54 +0000
@@ -591,10 +591,8 @@
 }
 
 #else /* FAM_KQUEUE */
 
 #if defined(WIN32) || defined(_WIN32)
-/* Disable the "translation unit is empty" warning */
-#pragma warning( disable : 4206 )
 #endif
 
 #endif /* FAM_KQUEUE */
diff -ru5 src/libmojave-external/cutil/fam_win32.c src/libmojave-external/cutil/fam_win32.c
--- src/libmojave-external/cutil/fam_win32.c	2006-12-08 19:21:40 +0000
+++ src/libmojave-external/cutil/fam_win32.c	2009-02-19 14:23:54 +0000
@@ -32,12 +32,10 @@
  * @end[license]
  */
 #ifdef WIN32
 #ifdef FAM_ENABLED
 
-/* Disable some of the warnings */
-#pragma warning( disable : 4127 4996 )
 
 #ifndef _WIN32_WINNT
 #define _WIN32_WINNT 0x0400
 #endif
 
diff -ru5 src/libmojave-external/cutil/lm_compat_win32.c src/libmojave-external/cutil/lm_compat_win32.c
--- src/libmojave-external/cutil/lm_compat_win32.c	2006-12-01 21:13:14 +0000
+++ src/libmojave-external/cutil/lm_compat_win32.c	2009-02-19 14:23:54 +0000
@@ -35,12 +35,10 @@
 #include <caml/memory.h>
 #include <caml/fail.h>
 #include <caml/custom.h>
 
 #ifdef WIN32
-/* Disable some of the warnings */
-#pragma warning( disable : 4100 4201 ) 
 
 #include <windows.h>
 #include <tlhelp32.h>
 #include <shlobj.h>
 
diff -ru5 src/libmojave-external/cutil/lm_ctype.c src/libmojave-external/cutil/lm_ctype.c
--- src/libmojave-external/cutil/lm_ctype.c	2006-12-01 21:13:14 +0000
+++ src/libmojave-external/cutil/lm_ctype.c	2009-02-19 14:23:54 +0000
@@ -38,12 +38,10 @@
 #include <caml/fail.h>
 #include <caml/custom.h>
 
 #ifdef WIN32 
 #include <windows.h>
-/* Disable some of the warnings */
-#pragma warning( disable : 4100 )
 #endif /* WIN32 */
 
 /*
  * Character classes.
  */
diff -ru5 src/libmojave-external/cutil/lm_fs_case_sensitive.c src/libmojave-external/cutil/lm_fs_case_sensitive.c
--- src/libmojave-external/cutil/lm_fs_case_sensitive.c	2007-04-30 17:47:57 +0000
+++ src/libmojave-external/cutil/lm_fs_case_sensitive.c	2009-02-19 14:23:54 +0000
@@ -104,11 +104,10 @@
 }
 
 #else /* not DETECT_FS_CASE_SENSITIVE_GETATTRLIST */
 
 #ifdef _WIN32
-#pragma warning( disable : 4100 )
 #endif /* _WIN32 */
 
 value lm_fs_case_sensitive_available(value _unit) {
     return Val_false;
 }
diff -ru5 src/libmojave-external/cutil/lm_heap.c src/libmojave-external/cutil/lm_heap.c
--- src/libmojave-external/cutil/lm_heap.c	2006-12-01 21:13:14 +0000
+++ src/libmojave-external/cutil/lm_heap.c	2009-02-19 14:23:54 +0000
@@ -37,12 +37,10 @@
 #include <caml/memory.h>
 #include <caml/fail.h>
 #include <caml/custom.h>
 
 #if defined(WIN32) || defined(_WIN32)
-/* Disable some of the warnings */
-#pragma warning( disable : 4146 )
 #endif
 
 extern char *caml_young_start, *caml_young_ptr, *caml_young_limit, *caml_young_end;
 
 static char *null = 0;
diff -ru5 src/libmojave-external/cutil/lm_notify.c src/libmojave-external/cutil/lm_notify.c
--- src/libmojave-external/cutil/lm_notify.c	2007-07-27 17:58:13 +0000
+++ src/libmojave-external/cutil/lm_notify.c	2009-02-19 14:23:54 +0000
@@ -39,12 +39,10 @@
 
 #ifdef FAM_ENABLED
 
 #ifdef WIN32 
 #include <windows.h>
-/* Disable some of the warnings */
-#pragma warning( disable : 4100 4189 4127 4702 4996 )
 #endif /* WIN32 */
 
 #ifdef FAM_PSEUDO
 #include "fam_pseudo.h"
 #else /* FAM_PSEUDO */
diff -ru5 src/libmojave-external/cutil/lm_printf.c src/libmojave-external/cutil/lm_printf.c
--- src/libmojave-external/cutil/lm_printf.c	2007-07-15 17:55:23 +0000
+++ src/libmojave-external/cutil/lm_printf.c	2009-02-19 14:23:54 +0000
@@ -40,12 +40,10 @@
 #include <caml/memory.h>
 #include <caml/fail.h>
 
 #ifdef WIN32 
 #include <windows.h>
-/* Disable some of the warnings */
-#pragma warning( disable : 4996)
 #endif /* WIN32 */
 
 /*
  * Some large buffer.
  */
diff -ru5 src/libmojave-external/cutil/lm_terminfo.c src/libmojave-external/cutil/lm_terminfo.c
--- src/libmojave-external/cutil/lm_terminfo.c	2007-05-15 19:03:32 +0000
+++ src/libmojave-external/cutil/lm_terminfo.c	2009-02-19 14:23:54 +0000
@@ -6,11 +6,10 @@
 #include <caml/mlvalues.h>
 #include <caml/alloc.h>
 #include <caml/memory.h>
 
 #ifdef WIN32
-#   pragma warning (disable: 4127 4189 4702 4996)
 #endif
 
 #ifdef NCURSES
 
 /* Headers that are readline-specific must be included here. */
diff -ru5 src/libmojave-external/cutil/lm_termsize.c src/libmojave-external/cutil/lm_termsize.c
--- src/libmojave-external/cutil/lm_termsize.c	2006-12-06 21:07:39 +0000
+++ src/libmojave-external/cutil/lm_termsize.c	2009-02-19 14:23:54 +0000
@@ -25,12 +25,12 @@
 #include <stdio.h>
 #ifdef __CYGWIN__
 #   include <sys/termios.h>
 #endif
 #ifdef WIN32
-#   include <Windows.h>
-#   pragma warning (disable: 4127 4189 4702)
+#   include <windows.h>
+#   include "unixsupport.h"
 #else
 #   include <sys/ioctl.h>
 #endif
 
 #include <caml/mlvalues.h>
@@ -47,11 +47,11 @@
     buf = alloc_small(2, 0);
 
     /* Get the terminal size, return None on failure */
 #ifdef WIN32
     {
-        HANDLE fd = *(HANDLE *)Data_custom_val(arg);
+        HANDLE fd = Handle_val(arg);
         CONSOLE_SCREEN_BUFFER_INFO ConsoleInfo;
         if (! GetConsoleScreenBufferInfo(fd, &ConsoleInfo))
             failwith("lm_termsize.c: caml_term_size: GetConsoleScreenBufferInfo failed");
 
         Field(buf, 0) = Val_int(ConsoleInfo.dwSize.Y);
diff -ru5 src/libmojave-external/cutil/lm_uname_ext.c src/libmojave-external/cutil/lm_uname_ext.c
--- src/libmojave-external/cutil/lm_uname_ext.c	2006-12-08 19:21:40 +0000
+++ src/libmojave-external/cutil/lm_uname_ext.c	2009-02-19 14:23:54 +0000
@@ -35,12 +35,10 @@
 #include <caml/memory.h>
 #include <caml/fail.h>
 
 #ifdef WIN32
 #include <windows.h>
-/* Disable some of the warnings */
-#pragma warning( disable : 4127 4189 4702 4996 )
 
 /*
  * Fake utsname.
  */
 struct utsname {
diff -ru5 src/libmojave-external/cutil/lm_unix_cutil.c src/libmojave-external/cutil/lm_unix_cutil.c
--- src/libmojave-external/cutil/lm_unix_cutil.c	2007-07-18 17:42:32 +0000
+++ src/libmojave-external/cutil/lm_unix_cutil.c	2009-02-19 14:23:54 +0000
@@ -36,12 +36,11 @@
 #include <caml/memory.h>
 #include <caml/custom.h>
 #include <caml/fail.h>
 
 #if defined(WIN32) || defined(_WIN32)
-/* Disable some of the warnings */
-#pragma warning( disable : 4100 4201 4127 4189 4702 4716 4996 )
+#include "unixsupport.h"
 #endif
 
 /*
  * Lock codes.
  */
@@ -73,11 +72,11 @@
 /*
  * File descriptor.
  */
 value int_of_fd(value fd)
 {
-    return Val_long((long) *(HANDLE *)Data_custom_val(fd));
+    return fd;
 }
 
 /*
  * Home directory on Win32.
  */
@@ -103,11 +102,11 @@
 #define F_RLOCK         4
 #define F_TRLOCK        5
 
 value lockf_win32(value v_fd, value v_kind, value v_len)
 {
-    HANDLE fd = *(HANDLE *)Data_custom_val(v_fd);
+    HANDLE fd = Handle_val(v_fd);
     int kind = Int_val(v_kind);
     int len = Int_val(v_len);
     OVERLAPPED overlapped;
     int code, flags = 0;
     DWORD pos, error = 0;
@@ -182,11 +181,11 @@
                     error,
                     MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                     (LPTSTR) &lpMsgBuf,
                     0, NULL);
 
-                sprintf(szBuf, "lockf_win32 failed with error %d: %s", error, lpMsgBuf); 
+                sprintf(szBuf, "lockf_win32 failed with error %d: %s", (int)error, (char*)lpMsgBuf); 
                 LocalFree(lpMsgBuf);
 
                 failwith(szBuf);
                 break;
             }
@@ -220,11 +219,11 @@
 /*
  * Truncate to the current position.
  */
 value ftruncate_win32(value v_fd)
 {
-    HANDLE fd = *(HANDLE *)Data_custom_val(v_fd);
+    HANDLE fd = Handle_val(v_fd);
     SetEndOfFile(fd);
     return Val_unit;
 }
 
 /************************************************************************
diff -ru5 src/libmojave-external/cutil/unixsupport.h src/libmojave-external/cutil/unixsupport.h
--- src/libmojave-external/cutil/unixsupport.h	2007-08-03 20:59:18 +0000
+++ src/libmojave-external/cutil/unixsupport.h	2009-02-19 14:23:54 +0000
@@ -32,27 +32,11 @@
 #ifndef _UNIXSUPPORT_H
 #define _UNIXSUPPORT_H
 
 #ifdef WIN32
 
-/*
- * HACK: this gets the handle from a file_descr.
- * This depends on the OCaml implementation, but
- * it is unlikely to change.
- */
-struct filedescr {
-    union {
-        HANDLE handle;
-        SOCKET socket;
-    } fd;
-    enum { KIND_HANDLE, KIND_SOCKET } kind;
-    int crt_fd;
-};
-
-#define Handle_val(v)           (((struct filedescr *) Data_custom_val(v))->fd.handle)
-#define Socket_val(v)           (((struct filedescr *) Data_custom_val(v))->fd.socket)
-#define Descr_kind_val(v)       (((struct filedescr *) Data_custom_val(v))->kind)
+#include <caml/unixsupport.h>
 
 #else /* !WIN32 */
 
 #define Socket_val(v)           (Int_val(v))
 
diff -ru5 src/shell/OMakefile src/shell/OMakefile
--- src/shell/OMakefile	2007-07-19 19:34:35 +0000
+++ src/shell/OMakefile	2009-02-19 14:23:54 +0000
@@ -24,11 +24,11 @@
     omake_shell_parse.ml
     omake_shell_sys.ml
 
 OCamlGeneratedFiles($(GENERATED_FILES))
 
-OMAKE_SHELL_SYS = omake_shell_sys_$(if $(equal $(OSTYPE), Win32), win32, unix).ml
+OMAKE_SHELL_SYS = omake_shell_sys_win32.ml
 
 omake_shell_sys.ml: $(OMAKE_SHELL_SYS)
     ln-or-cp $< $@
 
 clean:
