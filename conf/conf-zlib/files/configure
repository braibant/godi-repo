#! /bin/sh

# Arguments:
# $1: The proposed include directory
# $2: The proposed lib directory
# $3: The suggested dependency
#
# Environment:
# $CC
# $RPATH_FLAG
# $SEARCH_LIBS

INC="$1"
LIB="$2"
DEPS="$3"
INCOUT=""
LIBOUT=""
NEED_RPATH="no"

test -n "$CC" || CC="cc"
test -n "$RPATH_FLAG" || RPATH_FLAG="-R"
test -n "$SEARCH_LIBS" || SEARCH_LIBS="/usr /usr/local /usr/pkg /opt/pkg /opt/sfw"

# ======================================================================
# Generic configure functions
# ======================================================================

check_testpgm () {
    # Checks whether t.c can be compiled and started. Furthermore,
    # the output of the test program must match a criterion.
    # $1: name of the criterion
    # $2...: Further Arguments for compilation
    crit="$1"
    shift

    rm -f t

    echo "# Trying " $CC -o t t.c "$@" >>t.log
    $CC -o t t.c "$@" >>t.log 2>&1

    if [ $? -eq 0 ]; then
	echo "# Successful! Now trying to start this program..." >>t.log
	./t >t.out 2>t.err
	if [ $? -eq 0 ]; then
	    echo "# Successful! Now testing the output of the program..." >>t.log
	    eval "$crit" t.out t.err
	    if [ $? -eq 0 ]; then
	        echo "# Successful! Using these settings." >>t.log
		NEED_RPATH=no
		return 0
	    fi
	fi
    fi

    echo "# Failure, trying next possibility." >>t.log

    # Add missing RPATH_FLAG args

    rpath_flags=""
    for arg in "$@"; do
        case "$arg" in
	    -L*)
		dir=`echo X"$arg" | sed -e 's/^X-L//'`
		rpath_flags="$rpath_flags -Wl,${RPATH_FLAG}$dir"
		;;
	    *)
		: ;;
	esac
    done

    echo "# Trying " $CC -o t t.c $rpath_flags "$@" >>t.log
    $CC -o t t.c $rpath_flags "$@" >>t.log 2>&1

    if [ $? -eq 0 ]; then
	echo "# Successful! Now trying to start this program..." >>t.log
	./t >t.out 2>t.err
	if [ $? -eq 0 ]; then
	    echo "# Successful! Now testing the output of the program..." >>t.log
	    eval "$crit" t.out t.err
	    if [ $? -eq 0 ]; then
	        echo "# Successful! Using these settings." >>t.log
		NEED_RPATH=yes
		return 0
	    fi
	fi
    fi

    echo "# Failure, trying next possibility." >>t.log
    return 1
}

# ======================================================================
# Special configure functions
# ======================================================================

check_version () {
    v=`cat $1`
    test -n "$v" || return 1
    echo "Found version: " "$v"
}


check_library () {
    cat <<'EOF' >t.c
#include <stdlib.h>
#include "zlib.h"

main () { printf("%s\n", zlibVersion());  exit(0); }
EOF

    INCOUT="$1"
    LIBOUT="$2"
    if [ "$1" = "/usr/include" ]; then
        check_testpgm check_version -L"$2" -lz
    else
	check_testpgm check_version -I"$1" -L"$2" -lz
    fi
}


find_library () {
    if [ -n "$INC" -o -n "$LIB" ]; then
	echo "Checking the suggestion"
	echo "     (INC=$INC, LIB=$LIB)... "
	test -f "$INC/zlib.h" && check_library "$INC" "$LIB" && return 0
        echo "*** This suggestion does not work (see t.log for details)."
	echo "*** Trying to search the library..."
    fi
    for loc in $SEARCH_LIBS; do
	echo "Checking $loc... "
	if [ -f "$loc/include/zlib.h" ]; then
	    if check_library "$loc/include" "$loc/lib"; then
		return 0
	    fi
	fi
    done
    echo "===> zlib not found" >&2
    exit 1
}


rm -f t.log

find_library

echo
echo "*** Effective zlib configuration:"
echo "*** Directory for include file (zlib.h): $INCOUT"
echo "*** Libraries (-lz):                     $LIBOUT"
echo "*** Needs RPATH:                         $NEED_RPATH"
echo "*** Additional dependencies:             ${DEPS:-none}"
echo

echo "CONF_ZLIB_INCDIR=$INCOUT" > conf-zlib.mk
echo "CONF_ZLIB_LIBDIR=$LIBOUT" >>conf-zlib.mk
echo "CONF_ZLIB_NEED_RPATH=$NEED_RPATH" >>conf-zlib.mk
echo "CONF_ZLIB_DEPENDS=$DEPS" >>conf-zlib.mk

# Compat with Godi_script:
echo "CONF_ZLIB_LIBNAMES=z" >>conf-zlib.mk

exit 0
